#Import the necessary python libraries
# pip install pandas
# pip install glob
# pip install nltk
# pip install textblob
# pip install scikit-learn
# pip install transformers
# pip install torch
# pip install tqdm
# pip install numpy
# pip install langdetect
import pandas as pd
import glob
import string
import re
import datetime
import numpy as np
import torch
from torch.utils.data import DataLoader, TensorDataset
from langdetect import detect, DetectorFactory
from better_profanity import profanity
from tqdm import tqdm
import nltk
from nltk import word_tokenize
from nltk.corpus import stopwords
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.model_selection import train_test_split
from transformers import BertTokenizer, BertForSequenceClassification, AdamW

import warnings
warnings.filterwarnings("ignore")
##########################################################################################
#Step1: Read files from source directory
def FileReadFromDirectory(FileDirectory, FilePattern):
    FilesList = glob.glob(FileDirectory + FilePattern)
    print(FilesList)
    dataframes = []
    for filename in FilesList:
        Youtube_Comments = pd.read_csv(filename, sep=',')
        dataframes.append(Youtube_Comments)
        Youtube_Comments = pd.concat(dataframes, ignore_index=True)
    return Youtube_Comments

#Step2: Filter the dataframe based on date filters
def AnalysisWindowTimePeriodFilter(raw_date, start_date, end_date, column_name):
    raw_date[column_name] = pd.to_datetime(raw_date[column_name])
    raw_date['PublishDate'] = raw_date[column_name].dt.strftime('%d-%m-%Y')
    raw_date['PublishWeek'] = raw_date[column_name].dt.strftime('%U')
    raw_date['PublishMonth'] = raw_date[column_name].dt.strftime('%m')
    raw_date['PublishYear'] = raw_date[column_name].dt.strftime('%Y')
    raw_date['PublishMonthYear'] = raw_date[column_name].dt.strftime('%b%Y')
    raw_date['PublishHour'] = raw_date[column_name].dt.strftime('%H')
    datefilter = raw_date[raw_date[column_name].between(start_date, end_date)]
    return datefilter
###############################################################################################
#Step3: Convert needed Emoji and Smiley to text
def SmileyConversiontoTexts(SmileytoTextdf, column_name):
    smiley_dict = {
        ":)": "happy",          ":-)": "happy",
        ":D": "laughing",       ":-D": "laughing",
        ":(": "sad",            ":-(": "sad",
        ";)": "wink",           ";-)": "wink",
        ":P": "playful",        ":-P": "playful",
        ":O": "surprised",      ":-O": "surprised",
        "ЁЯШН": "heart eyes",     "ЁЯФе": "fire",
        "ЁЯСП": "clapping",       "ЁЯШГ": "happy",
        "ЁЯШД": "happy",          "ЁЯШБ": "happy",
        "ЁЯШЖ": "happy",          "ЁЯШК": "happy",
        "ЁЯШЛ": "happy",          "ЁЯШО": "happy",
        "ЁЯШЬ": "playful",        "ЁЯШЭ": "playful",
        "ЁЯШв": "sad",            "ЁЯШн": "sad",
        "ЁЯШЙ": "wink",           "ЁЯШЫ": "wink",
        "ЁЯШо": "surprised",      "ЁЯШ▓": "surprised",
        "тЭдя╕П": "heart",          "ЁЯТФ": "broken heart",
        "ЁЯЩМ": "celebration",    "ЁЯОЙ": "celebration",
        "ЁЯе│": "celebration",    "ЁЯСН": "ok",
        "ЁЯШВ": "laugh out loud", "тЩея╕П": "love",
        "ЁЯТк": "strong",         "ЁЯТе": "fire",
        "ЁЯЩП": "thanks",         "ЁЯСР": "claps",
        "ЁЯТЮ": "love"
    }

    pattern = r"(:-?\)|:-?D|:-?\(|;-?\)|:-?P|:-?O|ЁЯШН|ЁЯФе|ЁЯСП|ЁЯШГ|ЁЯШД|ЁЯШБ|ЁЯШЖ|ЁЯШК|ЁЯШЛ|ЁЯШО|ЁЯШЬ|ЁЯШЭ|ЁЯШв|ЁЯШн|ЁЯШЙ|ЁЯШЫ|ЁЯШо|ЁЯШ▓|тЭдя╕П|ЁЯТФ|ЁЯЩМ|ЁЯОЙ|ЁЯе│|ЁЯСН|ЁЯШВ|тЩея╕П|ЁЯТк|ЁЯТе|ЁЯЩП|ЁЯСР|ЁЯТЮ)"

    def smileytotext(match):
        smiley = match.group()
        word = smiley_dict.get(smiley, smiley)

        return ' ' + word + ' '

    SmileytoTextdf[column_name] = SmileytoTextdf[column_name].apply(lambda x: re.sub(pattern, smileytotext, x) if isinstance(x, str) else x)
    return SmileytoTextdf
###############################################################################################
#Step4: Remove irrelevant smileys from text column
def EmojiRemovalfromComments(comments):
    if isinstance(comments, str):
        smileyemoji_pattern = re.compile("["
                                  u"\U0001F600-\U0001F64F"  
                                  u"\U0001F300-\U0001F5FF"  
                                  u"\U0001F680-\U0001F6FF"  
                                  u"\U0001F700-\U0001F77F"  
                                  u"\U0001F780-\U0001F7FF"  
                                  u"\U0001F800-\U0001F8FF"  
                                  u"\U0001F900-\U0001F9FF"  
                                  u"\U0001FA00-\U0001FA6F"  
                                  u"\U0001FA70-\U0001FAFF"  
                                  u"\U00002702-\U000027B0"  
                                  u"\U000024C2-\U0001F251"
                                  "]+", flags=re.UNICODE)
        return smileyemoji_pattern.sub(r'', comments)
    else:
        return comments

###############################################################################################
#Step5: Remove the text with NAs
def Remove_NAs_Blanks(sourcedata, columnname):
    sourcedata[columnname] = sourcedata[columnname].str.strip()
    trimmed_df = sourcedata.dropna(subset=[columnname])
    return trimmed_df
###############################################################################################
#Step6: Punctuations removal in comments
def Punctuations_Removal(sourcedata, comments_column):
    translation_table = str.maketrans('', '', string.punctuation)
    sourcedata[comments_column] = sourcedata[comments_column].apply(lambda x: x.translate(translation_table))
    return sourcedata
###############################################################################################
#Step7: Duplicates removal in comments
def DuplicateCommentsRemoval(sourcedata, columnname):
    nodupdf = sourcedata.drop_duplicates(subset=[columnname])
    return nodupdf
###############################################################################################
#Step8: Remove the numbers in the comments
def NumbersinComments_Removal(sourcedata, columnname):

    sourcedata[columnname] = sourcedata[columnname].apply(lambda x: re.sub(r'\d+', '', x))
    return sourcedata
###############################################################################################
#Step9: Remove the repeat words in the comments
def RepeatwordsInCommentsRemoval(sourcedata, columnname):

    sourcedata[columnname] = sourcedata[columnname].apply(lambda x: ' '.join(dict.fromkeys(x.split())))
    return sourcedata
###############################################################################################
#Step10: Source didnt had label. We are adding labels based on tags
def CreateFlagsbyLabelingParty(sourcedata):

    bjp_keywords = [
        'bjp', 'rss', 'modi', 'nda', 'aiadmk', 'pmk', 'bjp', 'dmdk', 'tmc', 'shs', 'jd', 'akali', 'jaya', 'panneerselvam', 'mgr', 'ramadoss', 'vijayakanth', 'paneer', 'bharatiya janata party', 'shiv sena','all india anna dravida munnetra kazhagam', 'janata dal', 'shiromani akali dal', 'pattali makkal katchi', 'lok janshakti party', 'desiya murpokku dravida kazhagam', 'bharath dharma jana sena', 'asom gana parishad', 'apna dal', 'puthiya tamilagam', 'puthiya needhi katchi', 'tamil maanila congress', 'all jharkhand students union', 'bodoland people', 'nationalist democratic progressive party','kerala congress', 'rashtriya loktantrik party','all india n.r.congress','sumalatha', 'right wing', 'religious', 'hindu', 'namo', 'sarkar', 'jagan','thamarai', 'chokidar', 'chowkidaar', 'yogi', 'communal', 'sree ram', 'ram', 'shri', 'rama', 'bharat mata ki', 'siya', 'sri', 'siri', 'guru', 'bhakt', 'mata', 'b j p', 'bhartiya', 'bajrang', 'amit', 'sita', 'lord', 'owaisi', 'baba', 'krishna', 'modhi', 'mulayam',
        'рокро┐роЬрпЗрокро┐', 'роЕроХро┐ро▓ роЗроирпНродро┐роп роЕрогрпНрогро╛ родро┐ро░ро╛ро╡ро┐роЯ роорпБройрпНройрпЗро▒рпНро▒роХрпН роХро┤роХроорпН', 'роЕроЪрпЛроорпН роХрог рокро░ро┐ро╖родрпН', 'роЕрокрпНройро╛', 'роЕройрпИродрпНродрпБ роЬро╛ро░рпНроХрпНроХрогрпНроЯрпН рооро╛рогро╡ро░рпН роЪроЩрпНроХроорпН', 'роЖро░рпНроОро╕рпНроОро╕рпН', 'роЗро░ро╛рооро░рпН', 'роОроорпНроЬро┐роЖро░рпН', 'роХро┐ро░рпБро╖рпНрогро╛', 'роХрпЗро░ро│ро╛ роХро╛роЩрпНроХро┐ро░ро╕рпН', 'роХрпЛрооро╛ройрпН', 'роЪрооропроорпН', 'роЪро░рпНроХрпНроХро╛ро░рпН', 'роЪро╡рпНроХро┐роЯро╛ро░рпН', 'роЪро┐ропро╛', 'роЪро┐ро░ро┐', 'роЪро┐ро╡роЪрпЗройро╛', 'роЪрпАродрпИ', 'роЪрпБрооро▓родро╛','роЪрпЛроХро┐родро░рпН', 'роЯро┐роОроорпНроЪро┐', 'родрооро┐ро┤рпН рооро╛ройро┐ро▓ро╛ роХро╛роЩрпНроХро┐ро░ро╕рпН', 'родрпЗроЪро┐ропро╡ро╛род роЬройроиро╛ропроХ роорпБро▒рпНрокрпЛроХрпНроХрпБроХрпН роХроЯрпНроЪро┐', 'рокроХрпНродрпН','рокроЯрпНроЯро╛ро▓ро┐ роороХрпНроХро│рпН роХроЯрпНроЪро┐', 'рокроЬрпНро░роЩрпН', 'рокро╛рокро╛', 'рокро╛ро░родро┐роп роЬройродро╛ роХроЯрпНроЪро┐', 'рокро╛ро░родро┐ропро╛', 'рокро╛ро░родрпН родро░рпНроо роЬрой роЪрпЗройро╛','рокро╛ро░родрпН рооро╛родро╛ роХро┐', 'рокро╛роЬроХ', 'рокрпЛроЯрпЛро▓ро╛роирпНродрпБ роороХрпНроХро│рпН', 'рооро╛родро╛', 'роорпБро▓ро╛ропроорпН', 'роорпЛроЯро┐', 'роорпЛродро┐', 'ропрпЛроХро┐', 'ро░ро╛роородро╛ро╕рпН', 'ро░ро╛ро╖рпНроЯро┐ро░ро┐роп ро▓рпЛроХрпНродроирпНродрпНро░ро┐роХрпН роХроЯрпНроЪро┐', 'ро▓рпЛроХрпН роЬройроЪроХрпНродро┐ роХроЯрпНроЪро┐', 'ро╡роХрпБрокрпНрокрпБро╡ро╛родроорпН', 'ро╡ро▓родрпБ роЪро╛ро░ро┐', 'ро╡ро┐роЬропроХро╛роирпНродрпН', 'роЬройродро╛','роЬрпЖроХройрпН', 'роЬрпЖропро╛', 'ро╕рпНро░рпА', 'ро╕рпНро░рпА ро░ро╛роорпН', 'ро╖ро┐ро░рпЛроорогро┐ роЕроХро╛ро▓ро┐', 'роЕродро┐роорпБроХ', 'роЕрооро┐родрпН', 'роЗроирпНродрпБ', 'роХрпБро░рпБ', 'родро╛рооро░рпИ', 'родрпЗроЪро┐роп роорпБро▒рпНрокрпЛроХрпНроХрпБ родро┐ро░ро╛ро╡ро┐роЯ роХро┤роХроорпН', 'родрпЗроорпБродро┐роХ', 'роироорпЛ', 'рокройрпНройрпАро░рпН', 'рокройрпНройрпАро░рпНроЪрпЖро▓рпНро╡роорпН', 'рокро╛роороХ', 'рокро┐роЬрпЗрокро┐', 'рокрпБродро┐роп родрооро┐ро┤роХроорпН','рокрпБродро┐роп роирпАродро┐ роХроЯрпНроЪро┐', 'ро░ро╛рооро░рпН', 'ро╕рпНро░рпА',
        'р░Ер░Хр░╛р░▓р▒А','р░Жр░▓р▒Н р░Ьр░╛р░░р▒Нр░Цр░Вр░бр▒Н р░╕р▒Нр░Яр▒Вр░бр▒Жр░Вр░Яр▒Нр░╕р▒Н р░пр▒Вр░ир░┐р░пр░ир▒Н', 'р░Ер░ор░┐р░др▒Н', 'р░Ер░кр▒Нр░ир░╛ р░кр░кр▒Нр░кр▒Б', 'р░Ер░╢р▒Лр░ор▒Н р░Чр░г р░кр░░р░┐р░╖р░др▒Н','р░мр░┐ р░Ьр▒Ж р░кр░┐', 'р░мр░╛р░мр░╛', 'р░мр░Ьр░░р░Вр░Чр▒Н', 'р░нр░Хр▒Нр░др░┐', 'р░нр░╛р░░р░др▒Н р░ор░╛р░др░╛ р░Хр▒А р░Ьр▒Жр▒Ц', 'р░нр░░р░др▒Н р░зр░░р▒Нр░о р░Ьр░ир░╕р▒Зр░и', 'р░нр░╛р░░р░др▒Ар░п р░Ьр░ир░др░╛ р░кр░╛р░░р▒Нр░Яр▒А', 'р░нр░╛р░░р░др░┐', 'р░мр▒Лр░бр▒Лр░▓р░╛р░Вр░бр▒Н р░кр▒Нр░░р░Ьр░▓р▒Б','р░Ър▒Лр░Хр░┐р░жр░╛р░░р▒Н', 'р░Ър▒Мр░Хр░┐р░жр░╛р░░р▒Н', 'р░ор░др░кр░░р░ор▒Ир░и', 'р░Чр▒Бр░░р▒Бр░╡р▒Б', 'р░╣р░┐р░Вр░жр▒В', 'р░ор▒Ир░Хр▒Нр░░р▒Лр░╕р░╛р░лр▒Нр░Яр▒Н р░Ор░Хр▒Нр░╕р▒Жр░▓р▒Н', 'р░Ьр░ир░╕р▒Зр░и', 'р░Ьр░ир░др░╛ р░жр░╛р░▓р▒Н', 'р░Хр▒Зр░░р░│ р░Хр░╛р░Вр░Чр▒Нр░░р▒Жр░╕р▒Н', 'р░╢р▒Нр░░р▒А р░Хр▒Гр░╖р▒Нр░гр▒Бр░бр▒Б', 'р░▓р▒Лр░Хр▒Н р░Ьр░ир░╢р░Хр▒Нр░др░┐ р░кр░╛р░░р▒Нр░Яр▒А', 'р░кр▒Нр░░р░нр▒Бр░╡р▒Б', 'р░ор░╛р░др░╛', 'р░Ор░Вр░Ьр░┐р░Жр░░р▒Н', 'р░ор▒Лр░бр▒А', 'р░ор▒Лр░жр▒А.', 'р░ор▒Бр░▓р░╛р░пр░В', 'р░ир░ор▒Л', 'р░Ьр░╛р░др▒Ар░пр░╡р░╛р░ж р░кр▒Нр░░р░Ьр░╛р░╕р▒Нр░╡р░╛р░ор▒Нр░п р░кр▒Нр░░р░Чр░др░┐р░╢р▒Ар░▓ р░кр░╛р░░р▒Нр░Яр▒А', 'р░Тр░╡р▒Ир░╕р▒А','р░кр░ир▒Ар░░р▒Н р░Ер░░р▒Нр░зр░В р░др▒Жр░▓р▒Бр░Чр▒Бр░▓р▒Л', 'р░кр░ир▒Нр░ир▒Ар░░р▒Н р░╕р▒Жр░▓р▒Нр░╡р░В', 'р░кр▒Кр░Яр▒Нр░Яр▒Зр░▓р▒Б', 'р░░р░╛р░ор▒Бр░бр▒Б', 'р░░р░╛р░ор░жр░╛р░╕р▒Н', 'р░░р░╛р░╖р▒Нр░Яр▒Нр░░р▒Ар░п р░▓р▒Лр░Хр▒Н р░др░╛р░Вр░др▒Нр░░р░┐р░Хр▒Н р░кр░╛р░░р▒Нр░Яр▒А', 'р░ор░др░кр░░р░ор▒Ир░и', 'р░Хр▒Бр░бр░┐ р░╡р░┐р░Вр░Чр▒Н','р░Лр░╢р▒Нр░╢р▒Н', 'р░╕р░░р▒Нр░Хр░╛р░░р▒Н', 'р░╢р░┐р░░р▒Лр░ор░гр░┐ р░Ер░Хр░╛р░▓р▒А р░жр░╛р░▓р▒Н', 'р░╢р░┐р░╡р░╕р▒Зр░и', 'р░╢р▒Нр░░р▒А', 'р░╕р░┐р░░р░┐', 'р░╕р▒Ар░д', 'р░╢р▒Нр░░р▒А р░░р░╛р░ор▒Н', 'р░ор░╛ р░др░Вр░бр▒Нр░░р░┐р░Чр░╛р░░р▒Ир░ир░╛', 'р░╕р▒Бр░ор░▓р░д', 'р░др░ор░┐р░│ р░ор░╛р░гр░┐р░Хр▒Нр░пр░╛р░▓ р░Хр░╛р░Вр░Чр▒Нр░░р▒Жр░╕р▒Н', 'р░др░ор░░р▒И', 'р░Яр░┐р░Ор░Вр░╕р░┐', 'р░╡р░┐р░Ьр░пр░Хр░╛р░Вр░др▒Н', 'р░пр▒Лр░Чр░┐', 'р░кр░╡р░ир▒Н р░Хр░│р▒Нр░пр░╛р░гр▒Н', 'р░Ьр▒Жр░Ор░╕р▒Нр░кр░┐', 'р░Хр░ор░▓р░В',
        'рднрдХреНрдд', 'рдмреА рдЬреЗ рдкреА', 'рд╕рд░рдХрд╛рд░', 'рдЕрдХрд╛рд▓реА', 'рдЕрдкрдирд╛ рджрд╛рд▓', 'рдЕрдорд┐рдд', 'рдЕрд╕рдо рдЧрдг рдкрд░рд┐рд╖рдж',  'рдЖрд░рдПрд╕рдПрд╕', 'рдЖрд▓ рдЭрд╛рд░рдЦрдВрдб рд╕реНрдЯреВрдбреЗрдВрдЯреНрд╕ рдпреВрдирд┐рдпрди', 'рдПрди рдбреА рдП', 'рдХрд▓рд╛ рдПрдХреАрдХреГрдд рдкрд░рд┐рдпреЛрдЬрдирд╛', 'рдЧреБрд░реБ рдХрд╛ рд╕реНрдЯрд░реНрд▓рд┐рдВрдЧ', 'рдЪреЛрдХреАрджрд╛рд░', 'рдЪреМрдХреАрджрд╛рд░', 'рдЬрдЧрди', 'рдЬрди рд╕реЗрдирд╛', 'рдЬрдпрд╛', 'рдЬрд╛рддрд┐', 'рдЬреЗрдПрд╕рдкреА', 'рдЯреАрдПрдорд╕реА', 'рдбреЗрдореЛрдХреНрд░реЗрдЯрд┐рдХ рдкреНрд░реЛрдЧреНрд░реЗрд╕рд┐рд╡ рдкрд╛рд░реНрдЯреА', 'рддрдорд┐рд▓ рдордирд┐рд▓рд╛ рдХрд╛рдВрдЧреНрд░реЗрд╕', 'рдерд╛рдорд░рд╛рдИ', 'рджрд╛рд╣рд┐рдирд╛ рд╡рд┐рдВрдЧ', 'рдзрд╛рд░реНрдорд┐рдХ', 'рдирдореЛ', 'рдкрдиреНрдиреАрд░рд╕реЗрд▓реНрд╡рдо', 'рдкрд╡рди рдХрд▓реНрдпрд╛рдг', 'рдмрдЬрд░рдВрдЧ', 'рдмреАрдЬреВ рдЬрдирддрд╛ рджрд▓', 'рдмреАрдЬреЗрдкреАред', 'рдмреЛрдбреЛрд▓реИрдВрдб рдХреЗ рд▓реЛрдЧ', 'рднрд░рдд рдзрд░реНрдо рдЬрдирд╕реЗрдирд╛', 'рднрд╛рд░рдд рдорд╛рддрд╛ рдХреА рдЬрдп', 'рднрд╛рд░рддреАрдп', 'рднрд╛рд░рддреАрдп рдЬрдирддрд╛ рдкрд╛рд░реНрдЯреА', 'рдореБрд▓рд╛рдпрдо', 'рдореЛрджреА', 'рдореЛрдзреА', 'рдпреЛрдЧреА', 'рд░рд╛рдорджрд╛рд╕', 'рд░рд╛рд╖реНрдЯреНрд░реАрдп рд▓реЛрдХрддрд╛рдВрддреНрд░рд┐рдХ рдкрд╛рд░реНрдЯреА', 'рд░реИрдо', 'рд▓реЛрдХ рдЬрдирд╢рдХреНрддрд┐ рдкрд╛рд░реНрдЯреА', 'рд╢рд┐рд░реЛрдордгрд┐ рдЕрдХрд╛рд▓реА рджрд╛рд▓', 'рд╢рд┐рд╡ рд╕реЗрдирд╛', 'рд╢реНрд░реА', 'рд╢реНрд░реА', 'рд╢реНрд░реА рд░рд╛рдо', 'рд╢реНрд░реАрд░рд╛рдо', 'рд╕рд┐рдпрд╛', 'рд╕рд┐рд░реА', 'рд╕реАрддрд╛', 'рд╕реНрд╡рд╛рдореА', 'рд╣рд┐рдВрджреВ',
        'ржЖржХрж╛рж▓рж┐', 'ржЕрж▓ ржЭрж╛ржбрж╝ржЦржгрзНржб рж╕рзНржЯрзБржбрзЗржирзНржЯрж╕ ржЗржЙржирж┐ржпрж╝ржи', 'ржЕржорж┐ржд', 'ржмржЬрж░ржВ', 'ржнржХрзНржд', 'ржнрж╛рж░ржд ржорж╛рждрж╛ ржХрж┐', 'ржнрж╛рж░ржд ржзрж░рзНржо ржЬржи рж╕рзЗржи','ржнрж╛рж░рждрзАржпрж╝ ржЬржирждрж╛ ржкрж╛рж░рзНржЯрж┐', 'ржнрж╛рж░рждрж┐ржпрж╝рж╛', 'ржмрж┐ржЬрзЗржкрж┐', 'ржмрзЛржбрзЛрж▓рзНржпрж╛ржирзНржбрзЗрж░ ржорж╛ржирзБрж╖', 'ржЪржХрж┐ржжрж╛рж░', 'ржЪрзМржХрж┐ржжрж╛рж░', 'рж╕рж╛ржорзНржкрзНрж░ржжрж╛ржпрж╝рж┐ржХ', 'ржЧрзБрж░рзБ', 'рж╣рж┐ржирзНржжрзБ', 'ржЬржи рж╕рзЗржирж╛', 'ржЬржирждрж╛ ржбрж╛рж▓', 'ржХрзГрж╖рзНржгрж╛', 'ржкрзНрж░ржнрзБ', 'ржорж╛рждрж╛', 'ржорзЛржбрзА', 'ржорзЛржбрзА', 'ржорзБрж▓рж╛ржпрж╝ржо', 'ржирж╛ржорзЛ', 'ржПржиржбрж┐ржП', 'рж░рж╛ржо', 'рж░рж╛ржорж╛', 'рж░рж╛рж╖рзНржЯрзНрж░рзАржпрж╝ рж▓рзЛржХрждрж╛ржирзНрждрзНрж░рж┐ржХ ржкрж╛рж░рзНржЯрж┐', 'ржзрж░рзНржо', 'ржбрж╛ржи ржкрж╛ржЦрж╛', 'ржЖрж░ржПрж╕ржПрж╕', 'рж╕рж░ржХрж╛рж░','рж╢рж┐рж░рзЛржоржгрж┐ ржЖржХрж╛рж▓рж┐ ржбрж╛рж▓', 'рж╢рж┐ржмрж╕рзЗржирж╛', 'ржЪрж┐ржарж┐ ржмржирзНржзрзБржХрзЗ рж▓рзЗржЦрж╛', 'рж╕рзАрждрж╛', 'рж╕рж┐ржпрж╝рж╛', 'рж╢рзНрж░рзА рж░рж╛ржо', 'рж╢рзНрж░рзА', 'ржлрзБрж▓', 'ржЯрж┐ржПржорж╕рж┐', 'ржпрзЛржЧрзА',
        'рдЕрдХрд▓реА', 'рдПрдПрдордЖрдпрдЯреА', 'рдмрд╛рдмрд╛', 'рдмрдЬрд░рдВрдЧ', 'рднрдХреНрдд', 'рднрд╛рд░рдд рдорд╛рддрд╛ рдХреА', 'рднрд╛рд░рде рдзрд░реНрдо рдЬрди рд╕реЗрдирд╛', 'рднрд╛рд░рддреАрдп рдЬрдирддрд╛ рдкрд╛рд░реНрдЯреА', 'рднрд╛рд░рддреАрдпрд╛', 'рдмреАрдЬреЗрдкреА', 'рдмреЛрдбреЛрд▓реЕрдВрдб рд▓реЛрдХ', 'рдЪреЛрдХреАрджрд╛рд░', 'рдЪреМрдХреАрджрд╛рд░', 'рд╕рд╛рдВрдкреНрд░рджрд╛рдпрд┐рдХ', 'рдЧреБрд░реБ', 'рд╣рд┐рдВрджреВ', 'рдЬрдирд╕реЗрд╡рд╛', 'рдЬрдирддрд╛ рджрд╛рд▓', 'рдХреГрд╖реНрдгрд╛', 'рд▓реЛрдХ рдЬрдирд╢рдХреНрддреА рдкрд╛рд░реНрдЯреА', 'рд▓реЙрд░реНрдб', 'рдорд╛рддрд╛', 'рдореЛрдзреА', 'рдореЛрджреА', 'рдореБрд▓рд╛рдпрдо', 'рдирдореЛ', 'рдПрдирдбреАрдП', 'рд░реЕрдо', 'рд░рд╛рдо', 'рдзрд╛рд░реНрдорд┐рдХ', 'рдЙрдЬрд╡реНрдпрд╛ рдкрдВрдЦ', 'рдЖрд░рдПрд╕рдПрд╕', 'рд╕рд░рдХрд╛рд░', 'рд╢рд┐рд╡рд╕реЗрдирд╛', 'рд╢реНрд░реА.', 'рдПрд╕рдПрдЪрдПрд╕', 'рд╕рд┐рд░реА', 'рд╕реАрддрд╛', 'рд╕рд┐рдпрд╛', 'рд╢реНрд░реА рд░рд╛рдо', 'рд╢реНрд░реА', 'рдХрдорд│', 'рдпреЛрдЧреА',
        '╪з┌й╪з┘Д█М', '╪з┘Е█М┘╣', '╪и╪з╪и╪з', '╪и╪м╪▒┘Ж┌п', '╪и┌╛┌й╪к', '╪и┌╛╪з╪▒╪к ┘Е╪з╪к╪з ┌й█М', '╪и┌╛╪з╪▒╪к ╪п┌╛╪▒┘Е ╪м┘Ж╪з ╪│█М┘Ж╪з', '╪и┌╛╪з╪▒╪к█М█Б ╪м┘Ж╪к╪з ┘╛╪з╪▒┘╣█М', '╪и┌╛╪з╪▒╪к█М█Б', '╪и█М ╪м█Т ┘╛█М', '┌Ж┘И┌й█М╪п╪з╪▒', '┌Ж┘И┌й█М╪п╪з╪▒', '┘Б╪▒┘В█Б ┘И╪з╪▒╪з┘Ж█Б', '┌п╪▒┘И', '█Б┘Ж╪п┘И', '╪м┘Ж╪з ╪│█М┘Ж╪з', '╪м┘Ж╪к╪з ╪п╪з┘Д', '┌й╪▒╪┤┘Ж╪з', '┘Д╪з╪▒┌И', '┘Е╪з╪к╪з', '┘Е┘И╪п┌╛█М', '┘Е┘И╪п█М', '┘Е┘Д╪з╪ж┘Е', '┘Ж┘Е┘И', '╪з█М┘Ж ┌И█М ╪з█Т', '╪▒╪з┘Е', '╪▒╪з┘Е╪з', '┘Е╪░█Б╪и█М', '╪п╪з╪ж█М┌║ ╪и╪з╪▓┘И', '╪з┘Ж╪к█Б╪з╪ж█М ╪│╪з╪п█Б ╪│┘Ж╪п█М┌й╪к', '╪│╪▒┌й╪з╪▒', '╪┤█М╪▒┘И┘Е┘Ж█М ╪з┌й╪з┘Д█М ╪п╪з┘Д', '╪┤█М┘И ╪│█М┘Ж╪з', '╪┤╪▒█М', '╪│█М╪к╪з', '╪│╪▒█М ╪▒╪з┘Е', '╪│╪▒█М', '┘Д┘И┘╣╪│', '█М┘И┌п█М',
        'ркЕркХрк╛рк▓рлА', 'ркПркорлАркЯ', 'ркмрк╛ркмрк╛', 'ркмркЬрк░ркВркЧ', 'ркнркХрлНркд', 'ркнрк╛рк░ркд ркорк╛ркдрк╛ ркХрлА', 'ркнрк╛рк░ркд ркзрк░рлНрко ркЬрки рк╕рлЗркирк╛', 'ркнрк╛рк░ркдрлАркп ркЬркиркдрк╛ рккрк╛рк░рлНркЯрлА', 'ркнрк╛рк░ркдрлАркпрк╛', 'ркмрлНркЬрлНркк', 'ркЪрлЛркХрлАркжрк╛рк░', 'ркЪрлЛркХрлАркжрк╛рк░', 'рк╕рк╛ркВрккрлНрк░ркжрк╛ркпрк┐ркХ', 'ркЧрлБрк░рлБ', 'рк╣рк┐ркВркжрлБ', 'ркЬрки рк╕рлЗркирк╛', 'ркЬркиркдрк╛ ркжрк│', 'ркХрлГрк╖рлНркг', 'рк╕рлНрк╡рк╛ркорлА', 'ркЬркп ркорк╛ркдрк╛ ркжрлА', 'ркорлЛркврлА', 'ркорлЛркжрлА', 'ркорлБрк▓рк╛ркпрко', 'ркиркорлЛ', 'ркПркиркбрлАркП', 'рк░рлЗрко', 'рк░рк╛рко', 'ркзрк╛рк░рлНркорк┐ркХ ркХркЯрлНркЯрк░рк╡рк╛ркж', 'ркЬркоркгрлА рккрк╛ркВркЦ', 'ркЖрк░ркПрк╕ркПрк╕', 'рк╕рк░ркХрк╛рк░', 'рк╢рк┐рк╡ рк╕рлЗркирк╛', 'рк╢рлНрк░рлА', 'рк╕рлАркдрк╛', 'рк╢рлНрк░рлА рк░рк╛рко', 'рк╢рлНрк░рлА', 'ркХркорк│', 'ркдркоркХ', 'ркпрлЛркЧрлА',
        'р▓Ер▓ор▓┐р▓др│Н', 'р▓мр▓╛р▓мр▓╛', 'р▓нр▓Ьр▓░р▓Вр▓Чр│Н', 'р▓нр▓Хр│Нр▓др▓┐', 'р▓нр▓╛р▓░р▓др│Н р▓ор▓╛р▓др▓╛ р▓Хр▓┐', 'р▓нр▓╛р▓░р▓др│Н р▓зр▓░р│Нр▓о р▓Ьр▓ир▓╕р│Зр▓ир▓╛', 'р▓нр▓╛р▓░р▓др│Ар▓п р▓Ьр▓ир▓др▓╛ р▓кр▓Хр│Нр▓╖', 'р▓нр▓╛р▓░р│Нр▓др▓┐р▓пр▓╛', 'р▓мр▓┐р▓Ьр│Жр▓кр▓┐', 'р▓Ър│Лр▓Хр▓┐р▓жр▓╛р▓░р│Н', 'р▓Ър│Мр▓Хр▓┐р▓жр▓╛р▓░р│Н', 'р▓Хр│Лр▓ор│Б', 'р▓Чр│Бр▓░р│Б', 'р▓╣р▓┐р▓Вр▓жр│В', 'р▓Ьр▓ир▓╕р│Зр▓ир▓╛', 'р▓Ьр▓ир▓др▓╛ р▓жр▓╛р▓▓р│Н', 'р▓Хр│Гр▓╖р│Нр▓г', 'р▓▓р▓╛р▓░р│Нр▓бр│Н', 'р▓ор▓╛р▓др▓╛', 'р▓ор│Лр▓жр▓┐', 'р▓ор│Лр▓жр▓┐', 'р▓ор│Бр▓▓р▓╛р▓пр▓В', 'р▓ир▓ор│Л', 'р▓ир▓▓р│Нр▓▓р▓┐', 'р▓░р▓╛р▓о', 'р▓░р▓╛р▓о', 'р▓зр▓╛р▓░р│Нр▓ор▓┐р▓Х', 'р▓мр▓▓ р▓╡р▓┐р▓Вр▓Чр│Н', 'р▓др│Бр▓Хр│Нр▓Хр│Бр▓Чр▓│р│Б', 'р▓╕р▓░р│Нр▓Хр▓╛р▓░р│Н', 'р▓╢р▓┐р▓╡р▓╕р│Зр▓ир│Ж', 'р▓╢р│Нр▓░р│А', 'р▓╕р│Ар▓др▓╛', 'р▓╢р│Нр▓░р│А р▓░р▓╛р▓ор│Н', 'р▓╢р│Нр▓░р│А', 'р▓Хр▓ор▓▓р▓ж', 'р▓Яр▓┐р▓Ор▓Вр▓╕р▓┐', 'р▓пр│Лр▓Чр▓┐',
        'р┤Ер┤Хр╡Нр┤Хр┤│р┤┐', 'р┤Ер┤ор┤┐р┤др╡Н', 'р┤мр┤╛р┤м', 'р┤мр┤Ьр╡Нр┤░р┤Вр┤Чр╡Н', 'р┤нр┤Хр╡Нр┤др┤┐', 'р┤нр┤╛р┤░р┤др╡Н р┤ор┤╛р┤др┤╛ р┤Хр┤┐', 'р┤нр┤╛р┤░р┤др╡Н р┤зр╡╝р┤ор╡Нр┤о р┤Ьр┤ир┤╕р╡Зр┤и', 'р┤нр┤╛р┤░р┤др╡Ар┤п р┤Ьр┤ир┤др┤╛ р┤кр┤╛р╡╝р┤Яр╡Нр┤Яр┤┐', 'р┤нр┤╛р┤░р┤др╡Ар┤п', 'р┤мр┤┐.р┤Ьр╡Ж.р┤кр┤┐', 'р┤Ър╡Лр┤Хр╡Нр┤Хр┤┐р┤жр┤╛р╡╝', 'р┤Ър╡Чр┤Хр╡Нр┤Хр┤┐р┤жр┤╛р╡╝', 'р┤╕р┤╛р┤ор╡Бр┤жр┤╛р┤пр┤┐р┤Х', 'р┤Чр╡Бр┤░р╡Б', 'р┤╣р┤┐р┤ир╡Нр┤жр╡Б', 'р┤Ьр┤ир┤╕р╡Зр┤и', 'р┤Ьр┤ир┤др┤╛ р┤жр┤╛р╡╜', 'р┤Хр╡Гр┤╖р╡Нр┤г', 'р┤пр┤Ьр┤ор┤╛р┤ир╡╗', 'р┤ор┤╛р┤др┤╛', 'р┤ор╡Лр┤жр┤┐', 'р┤ор╡Лр┤жр┤┐', 'р┤ор╡Бр┤▓р┤╛р┤пр┤В', 'р┤ир┤ор╡Л', 'р┤▒р┤╛р┤В', 'р┤░р┤╛р┤о', 'р┤ор┤др┤В', 'р┤╡р┤▓р┤др╡Н р┤╡р┤┐р┤Вр┤Чр╡Н', 'р┤╕р╡╝р┤Хр╡Нр┤Хр┤╛р╡╝', 'р┤╢р┤┐р┤╡р┤╕р╡Зр┤и', 'р┤╢р╡Нр┤░р╡А.', 'р┤╕р╡Ар┤д', 'р┤╢р╡Нр┤░р╡А р┤▒р┤╛р┤В', 'р┤╢р╡Нр┤░р╡А.', 'р┤др┤╛р┤ор┤░', 'р┤пр╡Лр┤Чр┤┐',
        'риЕриХри╛ри▓рйА', 'риЕриори┐рид', 'римри╛римри╛', 'римриЬри░рй░риЧ', 'ринриЧрид', 'ринри╛ри░рид риори╛ридри╛ риХрйА', 'ринри╛ри░рие ризри░рио риЬрии ри╕рйЗриири╛', 'ринри╛ри░ридрйА риЬрииридри╛ рикри╛ри░риЯрйА', 'ринри╛ри░ридрйА', 'римрйА.риЬрйЗ.рикрйА', 'риЪрйМриХрйАрижри╛ри░', 'риЪрйМриХрйАрижри╛ри░', 'рилри┐ри░риХрйВ', 'риЧрйБри░рйВ', 'ри╣ри┐рй░рижрйВред', 'риЬрии ри╕рйИриири╛', 'риЬрииридри╛ рижри╛ри▓', 'риХрйНри░ри┐ри╕ри╝риири╛', 'ри░рй▒рим', 'риори╛ридри╛', 'риорйЛризрйА', 'риорйЛрибрйА', 'риорйБри▓ри╛риЗрио', 'риириорйЛ', 'ри░ри╛рио', 'ри░ри╛риори╛', 'ризри░рио', 'ри╕рй▒риЬри╛ риЦрй░рин', 'риЖри░риРри╕риРри╕', 'ри╕ри░риХри╛ри░', 'ри╕ри╝ри┐ри╡ ри╕рйЗриири╛', 'ри╕ри╝рйНри░рйА', 'ри╕рйАридри╛', 'ри╕ри╝рйНри░рйА ри░ри╛рио', 'ри╕ри╝рйНри░рйА', 'риХриори▓', 'рипрйЛриЧрйА',
        'рмПрм▓рм┐рмирм╛ рмХрм╣рм┐рм▓', 'рмормзрнНрнЯрм░рнЗ', 'рмПрм▓рм┐рмирм╛ рмХрм╣рм┐рм▓', 'рмПрм▓рм┐рмирм╛ рмХрм╣рм┐рм▓', 'рмПрм▓рм┐рмирм╛ рмХрм╣рм┐рм▓', 'рмнрм╛рм░рмд рморм╛рмдрм╛ рмХрм┐', 'рмнрм╛рм░рмд рмзрм░рнНрмо рмЬрмирм╕рнЗрмирм╛', 'рмнрм╛рм░рмдрнАрнЯ рмЬрмирмдрм╛ рмкрм╛рм░рнНрмЯрм┐', 'рмПрм▓рм┐рмирм╛ рмХрм╣рм┐рм▓', 'рмЪрнМрмХрм┐рмжрм╛рм░', 'рм╕рм╛рморнНрмкрнНрм░рмжрм╛рнЯрм┐рмХ', 'рмПрм▓рм┐рмирм╛ рмХрм╣рм┐рм▓', 'рм╣рм┐рмирнНрмжрнБрм░', 'рмЬрмирм╕рнЗрмирм╛', 'рмЬрмирмдрм╛ рмбрм╛рм▓', 'рмПрм▓рм┐рмирм╛ рмХрм╣рм┐рм▓', 'рмПрм▓рм┐рмирм╛ рмХрм╣рм┐рм▓', 'рморнЛрмбрм┐', 'рмПрм▓рм┐рмирм╛ рмХрм╣рм┐рм▓', 'рмПрм▓рм┐рмирм╛ рмХрм╣рм┐рм▓', 'рморнЗрм╖', 'рм░рм╛рморм╛', 'рмзрм╛рм░рнНрморм┐рмХ', 'рмбрм╛рм╣рм╛рмг рмкрмХрнНрм╖', 'рмПрм▓рм┐рмирм╛ рмХрм╣рм┐рм▓', 'рм╢рм┐рммрм╕рнЗрмирм╛', 'рмПрм▓рм┐рмирм╛ рмХрм╣рм┐рм▓', 'рм╢рнНрм░рнАрм░рм╛рмо', 'рм╢рнНрм░рнА', 'рмХрм╣рм┐рм▓', 'рмпрнЛрмЧрнА'
        ]

    ing_keywords = ['congress', 'gandhi', 'rahul', 'sonia', 'manmohan',  'pappu', 'dravida munnetra kazhagam','rashtriya janata dal','nationalist congress party', 'janata dal','rashtriya lok samta party','jharkhand mukti morcha','communist', 'marxist','hindustani awam morcha','vikassheel insaan party','muslim league', 'jan adhikar party','viduthalai chiruthaigal','jharkhand vikas morcha','swabhimani paksha', 'bahujan vikas aaghadi','leninist','kerala congress', 'socialist','socialist party', 'marumalarchi dravida munnetra kazhagam', 'mdmk', 'nehru', 'kongres', 'tmc', 'didi', 'bhim', 'jai hind', 'hind', 'mamta', 'communist', 'stalin', 'kanimozhi', 'periyar',  'dmk', 'vck',  'pinarai', 'vijayan', 'Mukti', 'morcha', 'Vikassheel', 'swabhimani paksha', 'kongunadu', 'lalu', 'tejashwi', 'janata dal', 'upendra', 'soren', 'yechury',
        'роХро╛роЩрпНроХро┐ро░ро╕рпН', 'ропрпБрокро┐роП', 'роХро╛роирпНродро┐', 'ро░ро╛роХрпБро▓рпН', 'роЪрпЛройро┐ропро╛', 'рооройрпНроорпЛроХройрпН', 'рокрокрпНрокрпБ', 'родро┐ро░ро╛ро╡ро┐роЯ роорпБройрпНройрпЗро▒рпНро▒роХрпН роХро┤роХроорпН', 'ро░ро╛ро╖рпНроЯро┐ро░ро┐роп роЬройродро╛', 'родрпЗроЪро┐ропро╡ро╛род роХро╛роЩрпНроХро┐ро░ро╕рпН роХроЯрпНроЪро┐', 'роЬройродро╛ рокро░рпБрокрпНрокрпБ', 'ро░ро╛ро╖рпНроЯро┐ро░ро┐роп ро▓рпЛроХрпН роЪроорпНродро╛ роХроЯрпНроЪро┐', 'роЬро╛ро░рпНроХрогрпНроЯрпН роорпБроХрпНродро┐ роорпЛро░рпНроЪрпНроЪро╛', 'роХроорпНропрпВройро┐ро╕рпНроЯрпН', 'рооро╛ро░рпНроХрпНроЪро┐ропроорпН', 'роЗроирпНродрпБро╕рпНродро╛ройро┐ роЕро╡ро╛роорпН роорпЛро░рпНроЪрпНроЪро╛', 'ро╡ро┐роХро╛ро╖рпАро▓рпН роЗройрпНроЪро╛ройрпН рокро╛ро░рпНроЯрпНроЯро┐', 'роорпБро╕рпНро▓рпАроорпН ро▓рпАроХрпН', 'роЬройрпН роЕродро┐роХро╛ро░ро┐ роХроЯрпНроЪро┐', 'ро╡ро┐роЯрпБродро▓рпИ роЪро┐ро▒рпБродрпНродрпИроХро│рпН', 'роЬро╛ро░рпНроХрпНроХрогрпНроЯрпН ро╡ро┐роХро╛ро╕рпН роорпЛро░рпНроЪрпНроЪро╛', 'ро╕рпНро╡ро╛рокро┐роорогро┐ рокроХрпНро╖ро╛', 'рокро╣рпБроЬройрпН ро╡ро┐роХро╛ро╕рпН роЖроХро╛роЯро┐', 'ро▓рпЖройро┐ройро┐ро╕рпНроЯрпН', 'роХрпЗро░ро│ро╛ роХро╛роЩрпНроХро┐ро░ро╕рпН', 'роЪрооро╡рпБроЯроорпИ', 'роЪрпЛроЪро▓ро┐ро╕рпНроЯрпН роХроЯрпНроЪро┐', 'рооро░рпБрооро▓ро╛роЪрпНроЪро┐ родро┐ро░ро╛ро╡ро┐роЯ роорпБройрпНройрпЗро▒рпНро▒роХрпН роХро┤роХроорпН', 'роо.родро┐.роорпБ.роХ', 'роирпЗро░рпБ', 'роЯро┐роОроорпНроЪро┐', 'родрпАроЯро┐', 'рокрпАроорпН', 'роЬрпЖропрпН ро╣ро┐роирпНродрпН', 'рокро┐ройрпН', 'роороорпНродро╛', 'ро╕рпНроЯро╛ро▓ро┐ройрпН', 'роХройро┐роорпКро┤ро┐', 'рокрпЖро░ро┐ропро╛ро░рпН', 'родро┐.роорпБ.роХ', 'рокро┐ройро░ро╛ропрпН', 'ро╡ро┐роЬропройрпН', 'ро╡рпАроЯрпБрокрпЗро▒рпБ', 'роорпЛро░рпНроЪрпНроЪро╛', 'ро╡ро┐роХро╛ро╖рпАро▓рпН', 'роХрпКроЩрпНроХрпБроиро╛роЯрпБ', 'ро▓ро╛ро▓рпБ', 'родрпЗроЬро╕рпНро╡ро┐', 'роЬройродро╛', 'роЙрокрпЗроирпНродро┐ро░ро╛', 'роЪрпЛро░ройрпН', 'ропрпЖроЪрпНроЪрпВро░ро┐',
        'р░Хр░╛р░Вр░Чр▒Нр░░р▒Жр░╕р▒Б', 'р░Йр░к', 'р░ор░╣р░╛р░др▒Нр░ор░╛ р░Чр░╛р░Вр░зр▒А', 'р░░р░╛р░╣р▒Бр░▓р▒Н', 'р░╕р▒Лр░ир░┐р░пр░╛', 'р░ор░ир▒Нр░ор▒Лр░╣р░ир▒Н', 'р░кр░кр▒Нр░кр▒Б', 'р░жр▒Нр░░р░╡р░┐р░б р░ор▒Бр░ир▒Нр░ир▒Зр░Яр▒Нр░░р░╛ р░Хр░Ьр░Чр░В', 'р░░р░╛р░╖р▒Нр░Яр▒Нр░░р▒Ар░п р░Ьр░ир░др░╛ р░жр░╛р░▓р▒Н', 'р░ир▒Зр░╖р░ир░▓р░┐р░╕р▒Нр░Яр▒Н р░Хр░╛р░Вр░Чр▒Нр░░р▒Жр░╕р▒Н р░кр░╛р░░р▒Нр░Яр▒А', 'р░Ьр░ир░др░╛ р░жр░╛р░▓р▒Н', 'р░░р░╛р░╖р▒Нр░Яр▒Нр░░р▒Ар░п р░▓р▒Лр░Хр▒Н р░╕р░ор░др░╛ р░кр░╛р░░р▒Нр░Яр▒А', 'р░Ьр░╛р░░р▒Нр░Цр░Вр░бр▒Н р░ор▒Бр░Хр▒Нр░др░┐ р░ор▒Лр░░р▒Нр░Ър░╛', 'р░Хр░ор▒Нр░пр▒Вр░ир░┐р░╕р▒Нр░Яр▒Н', 'р░ор░╛р░░р▒Нр░Хр▒Нр░╕р░┐р░╕р▒Нр░Яр▒Н', 'р░╣р░┐р░Вр░жр▒Вр░╕р▒Нр░ер░╛р░ир▒А р░Жр░╡р░В р░ор▒Лр░░р▒Нр░Ър░╛', 'р░╡р░┐р░Хр░╛р░╕р▒Н тАМр░╖р▒Ар░▓р▒Н р░Зр░ир▒Нр░╕р░╛р░ир▒Н р░кр░╛р░░р▒Нр░Яр▒А', 'р░ор▒Бр░╕р▒Нр░▓р░┐р░В р░▓р▒Ар░Чр▒Н', 'р░Ьр░и р░Ер░зр░┐р░Хр░╛р░░р░┐ р░кр░╛р░░р▒Нр░Яр▒А', 'р░╡р░┐р░жр▒Бр░др░▓р▒И р░Ър░┐р░░р▒Бр░др▒Ир░Чр░▓р▒Н', 'р░Ьр░╛р░░р▒Нр░Цр░Вр░бр▒Н р░╡р░┐р░Хр░╛р░╕р▒Н р░ор▒Лр░░р▒Нр░Ър░╛', 'р░╕р▒Нр░╡р░╛р░нр░┐р░ор░╛р░ир░┐ р░кр░╛р░Хр▒Нр░╖', 'р░мр░╣р▒Бр░Ьр░ир▒Н р░╡р░┐р░Хр░╛р░╕р▒Н р░Жр░Шр░╛р░бр░┐', 'р░▓р▒Жр░ир░┐р░ир░┐р░╕р▒Нр░Яр▒Н', 'р░Хр▒Зр░░р░│ р░Хр░╛р░Вр░Чр▒Нр░░р▒Жр░╕р▒Н', 'р░╕р░╛р░ор▒Нр░пр░╡р░╛р░жр░┐', 'р░╕р▒Лр░╖р░▓р░┐р░╕р▒Нр░Яр▒Н р░кр░╛р░░р▒Нр░Яр▒А', 'р░ор▒Бр░░р▒Бр░ор░▓р░░р▒Нр░Ър▒А р░жр▒Нр░░р░╛р░╡р░┐р░б р░ор▒Бр░ир▒Нр░ир▒Зр░Яр▒Нр░░р░╛ р░Хр░Ьр░Чр░В', 'р░ир▒Жр░╣р▒Нр░░р▒В', 'р░Хр▒Кр░Вр░Чр▒Нр░░р▒Жр░╕р▒Н', 'р░Яр░┐р░Ор░Вр░╕р░┐', 'р░жр░пр▒Нр░пр░В', 'р░нр▒Ар░ор▒Н', 'р░Ьр▒И р░╣р░┐р░Вр░жр▒Н', 'р░╡р▒Жр░ир▒Бр░Х', 'р░ор░ор░др░╛', 'р░╕р▒Нр░Яр░╛р░▓р░┐р░ир▒Н', 'р░Хр░ир░┐р░ор▒Кр░│р░┐', 'р░кр▒Жр░░р░┐р░пр░╛р░░р▒Н', 'р░кр░┐р░ир░╛р░░р▒И', 'р░╡р░┐р░Ьр░пр░ир▒Н', 'р░ор▒Бр░Хр▒Нр░др░┐', 'р░ор▒Лр░░р▒Нр░Ър░╛', 'р░╡р░┐р░Хр░╛р░╕р▒Н р░╖р▒Ар░▓р▒Н', 'р░Хр▒Кр░Вр░Чр▒Бр░ир░╛р░бр▒Б', 'р░▓р░╛р░▓р▒Б', 'р░др▒Зр░Ьр░╕р▒Нр░╡р░┐', 'р░Йр░кр▒Зр░Вр░жр▒Нр░░', 'р░╕р▒Лр░░р▒Жр░ир▒Н', 'р░пр▒Зр░Ър▒Вр░░р░┐',
        'рдХрд╛рдВрдЧреНрд░реЗрд╕', 'рдпреВрдкреАрдП', 'рдЧрд╛рдВрдзреА', 'рд╣рд┐рдВрджреА рдореЗрдВ рдХрдорд▓ рдХрд╛ рдлреВрд▓ рдЬрд╛рдирдХрд╛рд░реА', 'рд╕реЛрдирд┐рдпрд╛', 'рдордирдореЛрд╣рди', 'рдкрдкреНрдкреВ', 'рджреНрд░рд╡рд┐рдбрд╝ рдореБрдиреНрдиреЗрддреНрд░ рдХрдбрд╝рдЧрдо', 'рд░рд╛рд╖реНрдЯреНрд░реАрдп рдЬрдирддрд╛ рджрд╛рд▓', 'рд░рд╛рд╖реНрдЯреНрд░рд╡рд╛рджреА рдХрд╛рдВрдЧреНрд░реЗрд╕ рдкрд╛рд░реНрдЯреА', 'рдмреАрдЬреВ рдЬрдирддрд╛ рджрд▓', 'рд░рд╛рд╖реНрдЯреНрд░реАрдп рд▓реЛрдХ рд╕рдорддрд╛ рдкрд╛рд░реНрдЯреА', 'рдЭрд╛рд░рдЦрдВрдб рдореБрдХреНрддрд┐ рдореЛрд░реНрдЪрд╛', 'рд╕рд╛рдореНрдпрд╡рд╛рдж', 'рдорд╛рд░реНрдХреНрд╕рд╡рд╛рджреА', 'рд╣рд┐рдВрджреБрд╕реНрддрд╛рдиреА рдЕрд╡рд╛рдо рдореЛрд░реНрдЪрд╛', 'рд╡рд┐рдХрд╛рд╢реАрд▓ рдЗрдВрд╕рд╛рди рдкрд╛рд░реНрдЯреА', 'рдореБрд╕реНрд▓рд┐рдо рд▓реАрдЧ', 'рдЬрди рдЕрдзрд┐рдХрд╛рд░ рдкрд╛рд░реНрдЯреА', 'рд╡рд┐рджреБрдерд▓рд╛рдИ рдЪрд┐рд░реБрдерд╛рдЗрдЧрд▓', 'рдЭрд╛рд░рдЦрдВрдб рд╡рд┐рдХрд╛рд╕ рдореЛрд░реНрдЪрд╛', 'рд╕реНрд╡рд╛рднрд┐рдорд╛рдиреА рдкрдХреНрд╖', 'рдмрд╣реБрдЬрди рд╡рд┐рдХрд╛рд╕ рдЖрдШрд╛рдбрд╝реА', 'рд▓реЗрдирд┐рдирд╡рд╛рджреА', 'рдХреЗрд░рд▓ рдХрд╛рдВрдЧреНрд░реЗрд╕', 'рд╕рдорд╛рдЬрд╡рд╛рджреА', 'рд╕реЛрд╢рд▓рд┐рд╕реНрдЯ рдкрд╛рд░реНрдЯреА', 'рдорд░реБрдорд▓рд╛рд░реНрдЪреА рджреНрд░рд╡рд┐рдбрд╝ рдореБрдиреЗрддреНрд░ рдХрдЭрдЧрдо', 'рдиреЗрд╣рд░реВ', 'рдХреЛрдВрдЧреНрд░реЗрд╕', 'рдЯреАрдПрдорд╕реА', 'рджреАрджреА', 'рднреАрдо', 'рдЬрдп рд╣рд┐рдиреНрдж', 'рд╡рд┐рд╢реНрд╡рд╛рд╕', 'рд╕реНрдЯрд╛рд▓рд┐рди?', 'рдХрдирд┐рдореЛрдЭреА', 'рдкреЗрд░рд┐рдпрд╛рд░', 'рдкрд┐рдирд░рд╛рдИ', 'рд╡рд┐рдЬрдпрди', 'рдореБрдХреНрддрд┐', 'рдореЛрд░реНрдЪрд╛', 'рд╡рд┐рдХрд╛рд╕рд╢реАрд▓', 'рдХреЛрдВрдЧреБрдирд╛рдбреБ', 'рд▓рд╛рд▓реВ', 'рддреЗрдЬрд╕реНрд╡реА', 'рдЙрдкреЗрдиреНрджреНрд░', 'рд╕реЛрд░реЗрди', 'рдпреЗрдЪреБрд░реА',
        'ржХржВржЧрзНрж░рзЗрж╕', 'ржЙржк', 'ржЧрж╛ржирзНржзрзА', 'рж░рж╛рж╣рзБрж▓', 'рж╕рзЛржирж┐ржпрж╝рж╛', 'ржоржиржорзЛрж╣ржи', 'ржкрж╛ржкрзНржкрзБ', 'рж░рж╛рж╖рзНржЯрзНрж░рзАржпрж╝ ржЬржирждрж╛ ржбрж╛рж▓', 'ржЬрж╛рждрзАржпрж╝рждрж╛ржмрж╛ржжрзА ржХржВржЧрзНрж░рзЗрж╕ ржкрж╛рж░рзНржЯрж┐', 'ржЬржирждрж╛ ржбрж╛рж▓', 'рж░рж╛рж╖рзНржЯрзНрж░рзАржпрж╝ рж▓рзЛржХ рж╕ржорждрж╛ ржкрж╛рж░рзНржЯрж┐', 'ржЭрж╛ржбрж╝ржЦржгрзНржб ржорзБржХрзНрждрж┐ ржорзЛрж░рзНржЪрж╛', 'ржХржорж┐ржЙржирж┐ржЬржо', 'ржорж╛рж░рзНржХрж╕ржмрж╛ржжрзА', 'рж╣рж┐ржирзНржжрзБрж╕рзНрждрж╛ржирзА ржЖржУржпрж╝рж╛ржо ржорзЛрж░рзНржЪрж╛', 'ржмрж┐ржХрж╢рж┐рж▓ ржЗржирж╕рж╛ржи ржкрж╛рж░рзНржЯрж┐', 'ржорзБрж╕рж▓рж┐ржо рж▓рзАржЧ', 'ржЬржи ржЕржзрж┐ржХрж╛рж░ ржкрж╛рж░рзНржЯрж┐', 'рж▓рж┐ржмрж╛рж░рзЗрж╢ржи ржЪрж┐рждрж╛ржмрж╛ржШ', 'ржЭрж╛ржбрж╝ржЦржгрзНржб ржмрж┐ржХрж╛рж╢ ржорзЛрж░рзНржЪрж╛', 'ржЖрждрзНржорж╕ржорзНржорж╛ржирж┐ржд ржжрж▓', 'ржмрж╣рзБржЬржи ржмрж┐ржХрж╛рж╢ ржЖржШрж╛ржжрж┐', 'рж▓рзЗржирж┐ржиржмрж╛ржжрзА', 'ржХрзЗрж░рж╛рж▓рж╛ ржХржВржЧрзНрж░рзЗрж╕', 'рж╕ржорж╛ржЬрждрж╛ржирзНрждрзНрж░рж┐ржХ', 'рж╕ржорж╛ржЬрждрж╛ржирзНрждрзНрж░рж┐ржХ ржжрж▓', 'ржирзЗрж╣рзЗрж░рзБ', 'ржХрзЛржВржЧрзНрж░рзЗрж╕', 'ржЯрж┐ржПржорж╕рж┐', 'ржжрж┐ржжрж┐', 'ржнрзАржо', 'ржЬржпрж╝ рж╣рж┐ржирзНржб', 'рж╣рж░рж┐ржгрзА', 'ржоржорждрж╛', 'рж╕рзНржЯрзНржпрж╛рж▓рж┐ржи', 'ржкрзЗрж░рж┐ржпрж╝рж╛рж░', 'ржкрж┐ржирж╛рж░рж╛ржЗ', 'ржмрж┐ржЬржпрж╝ржи', 'ржорзБржХрзНржд', 'ржорзЛрж░рзНржЪрж╛', 'ржмрж┐ржХрж╢рж┐рж▓', 'ржХржЩрзНржЧрзБржирзНржбрзБ', 'рж▓рж╛рж▓рзБ', 'рждрзЗржЬрж╕рзНржмрзА', 'ржЙржкрзЗржирзНржжрзНрж░', 'рж╕рзЛрж░рзЗржи', 'ржЗржпрж╝рзЗржЪрзБрж░рж┐',
        'рдХрд╛рдБрдЧреНрд░реЗрд╕', 'рдЙрдк', 'рдЧрд╛рдВрдзреА', 'рд░рд╣реБрд▓', 'рд╕реЛрдирд┐рдпрд╛', 'рдордирдореЛрд╣рди', 'рдкрдкреНрдкреВ', 'рджреНрд░рд╡рд┐рдб рдореБрдиреЗрддреНрд░ рдХрд╛рдЭрдЧрдо', 'рд░рд╛рд╖реНрдЯреНрд░реАрдп рдЬрдирддрд╛ рджрд▓', 'рд░рд╛рд╖реНрдЯреНрд░рд╡рд╛рджреА рдХрд╛рдБрдЧреНрд░реЗрд╕ рдкрдХреНрд╖', 'рдЬрдирддрд╛ рджрд╛рд▓', 'рд░рд╛рд╖реНрдЯреНрд░реАрдп рд▓реЛрдХ рд╕рдорддрд╛ рдкрд╛рд░реНрдЯреА', 'рдЭрд╛рд░рдЦрдВрдб рдореБрдХреНрддреА рдореЛрд░реНрдЪрд╛', 'рдХрдореНрдпреБрдирд┐рд╕реНрдЯ', 'рдорд╛рд░реНрдХреНрд╕рд╡рд╛рджреА', 'рд╣рд┐рдВрджреБрд╕реНрддрд╛рдиреА рдЕрд╡рд╛рдо рдореЛрд░реНрдЪрд╛', 'рд╡рд┐рдХрд╛рд╕рд╢реАрд▓ рдЗрдиреНрд╕рд╛рди рдкрд╛рд░реНрдЯреА', 'рдореБрд╕реНрд▓рд┐рдо рд▓реАрдЧ', 'рдЬрди рдЕрдзрд┐рдХрд╛рд░реА рдкрд╛рд░реНрдЯреА', 'рд╡рд┐рджреБрдерд▓рд╛рдИ рдЪрд┐рд░реБрдерд╛рдИрдЧрд▓', 'рдЭрд╛рд░рдЦрдВрдб рд╡рд┐рдХрд╛рд╕ рдореЛрд░реНрдЪрд╛', 'рд╕реНрд╡рд╛рднрд┐рдорд╛рдиреА рдкрд╛рдХреНрд╖', 'рдмрд╣реБрдЬрди рд╡рд┐рдХрд╛рд╕ рдЖрдШрд╛рдбреА', 'рд▓реЗрдирд┐рдирд╡рд╛рджреА', 'рдХреЗрд░рд│ рдХрд╛рдБрдЧреНрд░реЗрд╕', 'рд╕рдорд╛рдЬрд╡рд╛рдж', 'рд╕рдорд╛рдЬрд╡рд╛рджреА рдкрдХреНрд╖', 'рдиреЗрд╣рд░реВ', 'рдХреЛрдВрдЧрд░реЗрд╕', 'рдЯреАрдПрдорд╕реА', 'рджреАрджреА', 'рднреАрдо', 'рдЬрдп рд╣рд┐рдВрдж', 'рд╣рд┐рдВрдж', 'рдордорддрд╛', 'рд╕реНрдЯреЕрд▓рд┐рди', 'рдХрдирд┐рдореЛрд│реА', 'рдкреЗрд░рд┐рдпрд╛рд░', 'рдкрд┐рдирд░рд╛рдИ', 'рд╡рд┐рдЬрдпрд╛рди', 'рдореБрдХреНрддреА', 'рдореЛрд░реНрдЪрд╛', 'рд╡рд┐рдХрд╛рд╕рд╢реАрд▓', 'рдХреЛрдВрдЧреБрдирд╛рдбреВ', 'рд▓рд╛рд▓реВ', 'рддреЗрдЬрд╕реНрд╡реА', 'рдЙрдкреЗрдВрджреНрд░', 'рд╕реЛрд░реЗрди', 'рдпреЗрдЪреБрд░реА',
        '┌й╪з┘Ж┌п╪▒█М╪│', '█М┘И ┘╛█М ╪з█Т', '┌п╪з┘Ж╪п┌╛█М', '╪▒╪з█Б┘И┘Д', '╪│┘И┘Ж█М╪з', '┘Е┘Ж ┘Е┘И█Б┘Ж', '┘╛┘╛┘И', '╪п╪▒╪з┘И┌С ┘Е┘Ж╪к╪▒╪з ┌й╪з╪▓┌п┘Е', '┘В┘И┘Е█М ╪м┘Ж╪к╪з ╪п╪з┘Д', '┘Ж█М╪┤┘Ж┘Д╪│┘╣ ┌й╪з┘Ж┌п╪▒█М╪│ ┘╛╪з╪▒┘╣█М', '╪м┘Ж╪к╪з ╪п╪з┘Д', '╪▒╪з╪┤┘╣╪▒█М█Б ┘Д┘И┌й ╪│┘Е╪к╪з ┘╛╪з╪▒┘╣█М', '╪м┌╛╪з╪▒┌й┌╛┘Ж┌И ┘Е┌й╪к█М ┘Е┘И╪▒┌Ж█Б', '┌й┘Е█М┘И┘Ж╪│┘╣', '┘Е╪з╪▒┌й╪│█М', '█Б┘Ж╪п┘И╪│╪к╪з┘Ж█М ╪│┘И┘Д ┘Е┘И╪▒┌Ж█Б', '┘И┌й╪з╪│█М┘Д ╪з┘Ж╪│╪з┘Ж ┘╛╪з╪▒┘╣█М', '┘Е╪│┘Д┘Е ┘Д█М┌п', '╪м┘Ж ╪з╪п┌╛█М┌й╪з╪▒ ┘╛╪з╪▒┘╣█М', '╪м┌╛╪з╪▒┌й┌╛┘Ж┌И ┘И┌й╪з╪│ ┘Е┘И╪▒┌Ж█Б', '╪│┘И╪з╪и┌╛█М┘Е╪з┘Ж█М ┘╛┌й╪┤╪з', '╪и█Б┘И╪м┘Ж ┘И┌й╪з╪│ ╪в╪║╪з╪п█М', '┘Д█М┘Ж┘Ж╪│┘╣', '┌й█М╪▒╪з┘Д█Б ┌й╪з┘Ж┌п╪▒█М╪│', '╪│┘И╪┤┘Д╪│┘╣', '╪│┘И╪┤┘Д╪│┘╣ ┘╛╪з╪▒┘╣█М', '┘Ж█Б╪▒┘И', '╪п█М╪п█М', '╪и┌╛█М┘Е', '╪м█Т █Б┘Ж╪п', '┘╛┌Ж┌╛┘И╪з┌С╪з', '┘Е╪з┘Е╪к╪з', '╪з╪│┘╣╪з┘Д┘Ж', '┌й┘Ж█М┘Е┘И╪▓█М', '┘╛┘Ж╪з╪▒╪з╪ж█М', '┘И╪м█М╪з┘Ж', '┘Е┌й╪к█М', '┘Е┘И╪▒┌Ж█Б', '┘И┌й╪з╪│█М┘Д', '┌й┘И┘Ж┌п┘И┘Ж╪з┌И┘И', '┘Д╪з┘Д┘И', '╪к█М╪м╪│┘И█М', '╪з┘╛┘Ж╪п╪▒', '╪│┘И╪▒┘Ж', '█М┌Ж┘И╪▒█М',
        'ркХрлЛркВркЧрлНрк░рлЗрк╕', 'ркЙрккрк╛', 'ркирк╡ркирлАркдрк▓рк╛рк▓', 'рк░рк╛рк╣рлБрк▓', 'рк╕рлЛркирк┐ркпрк╛', 'ркоркиркорлЛрк╣рки', 'рккрккрлНрккрлБ', 'ркжрлНрк░рк╡рк┐ркб ркорлБркирлЗркдрлНрк░ ркХркЭркЧрко', 'рк░рк╛рк╖рлНркЯрлНрк░рлАркп ркЬркиркдрк╛ ркжрк╛рк│', 'рк░рк╛рк╖рлНркЯрлНрк░рк╡рк╛ркжрлА ркХрлЛркВркЧрлНрк░рлЗрк╕ рккрк╛рк░рлНркЯрлА', 'ркЬркиркдрк╛ ркжрк│', 'рк░рк╛рк╖рлНркЯрлНрк░рлАркп рк▓рлЛркХ рк╕ркоркдрк╛ рккрк╛рк░рлНркЯрлА', 'ркЭрк╛рк░ркЦркВркб ркорлБркХрлНркдрк┐ ркорлЛрк░ркЪрк╛', 'рк╕рк╛ркорлНркпрк╡рк╛ркжрлА', 'ркорк╛рк░рлНркХрлНрк╕рк╡рк╛ркжрлА', 'рк╣рк┐ркВркжрлБрк╕рлНркдрк╛ркирлА ркЖркжрко ркорлЛрк░ркЪрк╛', 'рк╡рк┐ркХрк╛рк╕рк╢рлАрк▓ ркЗркирлНрк╕рк╛рки рккрк╛рк░рлНркЯрлА', 'ркорлБрк╕рлНрк▓рк┐рко рк▓рлАркЧ', 'ркЬрки ркЕркзрк┐ркХрк╛рк░ рккрк╛рк░рлНркЯрлА', 'рк╡рк┐ркжрлБркерк▓рк╛ркЗ ркЪрк┐рк░ркерлИркЧрк▓', 'ркЭрк╛рк░ркЦркВркб рк╡рк┐ркХрк╛рк╕ ркорлЛрк░ркЪрк╛', 'рк╕рлНрк╡рк╛ркнрк┐ркорк╛ркирлА рккркХрлНрк╖', 'ркмрк╣рлБркЬрки рк╡рк┐ркХрк╛рк╕ ркЖркШрк╛ркбрлА', 'рк▓рлЗркирк┐ркирк╡рк╛ркжрлА', 'ркХрлЗрк░рк│ ркХрлЛркВркЧрлНрк░рлЗрк╕', 'рк╕ркорк╛ркЬрк╡рк╛ркжрлА', 'рк╕ркорк╛ркЬрк╡рк╛ркжрлА рккркХрлНрк╖', 'ркорк░рлБркорк╛рк▓рк╛рк░рлНркЪрлА ркжрлНрк░рк╡рк┐ркб ркорлБркирлЗркдрлНрк░ ркХркЭркЧрко', 'ркирлЗрк╣рк░рлБ', 'ркХрлЛркВркЧрлНрк░рлЗрк╕', 'ркжрлАркжрлА', 'ркнрлАрко,', 'ркЬркп рк╣рк┐ркирлНркж', 'ркоркоркдрк╛', 'рк╕рк╛ркорлНркпрк╡рк╛ркжрлА', 'рк╕рлНркЯрк╛рк▓рк┐рки', 'ркХркирк┐ркорлЛркЭрлА', 'рккрлЗрк░рк┐ркпрк╛рк░', 'рккрк┐ркирк╛рк░рк╛ркИ', 'рк╡рк┐ркЬркпрки', 'ркорлБркХрлНркдрк┐', 'ркорлЛрк░ркЪрк╛', 'рк╡рк┐ркХрк╛рк╕рк╢рлАрк▓', 'рк╕рлНрк╡рк╛ркнрк┐ркорк╛ркирлА рккркХрлНрк╖', 'ркХрлЛркВркЧрлБркирк╛ркбрлБ', 'рк▓рк╛рк▓рлБ', 'ркдрлЗркЬрк╕рлНрк╡рлА',
        'р▓Хр▓╛р▓Вр▓Чр│Нр▓░р│Жр▓╕р│Н', 'р▓Йр▓к', 'р▓Чр▓╛р▓Вр▓зр▓┐', 'р▓░р▓╛р▓╣р│Бр▓▓р│Н', 'р▓╕р│Лр▓ир▓┐р▓пр▓╛', 'р▓ор▓ир▓ор│Лр▓╣р▓ир│Н', 'р▓кр▓кр│Нр▓кр│Б', 'р▓жр│Нр▓░р▓╛р▓╡р▓┐р▓б р▓ор│Бр▓ир│Нр▓ир│Зр▓др│Нр▓░ р▓Хр▓│р▓Чр▓В', 'р▓░р▓╛р▓╖р│Нр▓Яр│Нр▓░р│Ар▓п р▓Ьр▓ир▓др▓╛ р▓жр▓╛р▓▓р│Н', 'р▓░р▓╛р▓╖р│Нр▓Яр│Нр▓░р│Ар▓пр▓др▓╛р▓╡р▓╛р▓жр▓┐ р▓Хр▓╛р▓Вр▓Чр│Нр▓░р│Жр▓╕р│Н р▓кр▓Хр│Нр▓╖', 'р▓Ьр▓ир▓др▓╛ р▓жр▓╛р▓▓р│Н', 'р▓░р▓╛р▓╖р│Нр▓Яр│Нр▓░р│Ар▓п р▓▓р│Лр▓Хр▓╕р▓ор▓др▓╛ р▓кр▓╛р▓░р│Нр▓Яр▓┐', 'р▓Ьр▓╛р▓░р│Нр▓Цр▓Вр▓бр│Н р▓ор│Бр▓Хр│Нр▓др▓┐ р▓ор│Лр▓░р│Нр▓Ър▓╛', 'р▓Хр│Лр▓ор│Бр▓╡р▓╛р▓жр▓┐', 'р▓ор▓╛р▓░р│Нр▓Хр│Нр▓╕р│Нр▓╡р▓╛р▓жр▓┐', 'р▓╣р▓┐р▓Вр▓жр│Вр▓╕р│Нр▓др▓╛р▓ир▓┐ р▓Ер▓╡р▓ор│Н р▓ор│Лр▓░р│Нр▓Ър▓╛', 'р▓╡р▓┐р▓Хр▓╛р▓╕р│Ар▓▓р│Н р▓Зр▓ир│Нр▓╕р▓╛р▓ир│Н р▓кр▓╛р▓░р│Нр▓Яр▓┐', 'р▓ор│Бр▓╕р│Нр▓▓р▓┐р▓В р▓▓р│Ар▓Чр│Н', 'р▓Ьр▓и р▓Ер▓зр▓┐р▓Хр▓╛р▓░р▓┐ р▓кр▓╛р▓░р│Нр▓Яр▓┐', 'р▓╡р▓┐р▓жр│Бр▓ер▓▓р│И р▓Ър▓┐р▓░р│Бр▓ер│Ир▓Чр▓▓р│Н', 'р▓Ьр▓╛р▓░р│Нр▓Цр▓Вр▓бр│Н р▓╡р▓┐р▓Хр▓╛р▓╕р│Н р▓ор│Лр▓░р│Нр▓Ър▓╛', 'р▓╕р│Нр▓╡р▓╛р▓нр▓┐р▓ор▓╛р▓ир▓┐ р▓кр▓Хр│Нр▓╖', 'р▓мр▓╣р│Бр▓Ьр▓ир│Н р▓╡р▓┐р▓Хр▓╛р▓╕р│Н р▓Жр▓Шр▓╛р▓бр▓┐', 'р▓▓р│Жр▓ир▓┐р▓ир│Нр▓╡р▓╛р▓жр▓┐', 'р▓Хр│Зр▓░р▓│ р▓Хр▓╛р▓Вр▓Чр│Нр▓░р│Жр▓╕р│Н', 'р▓╕р▓ор▓╛р▓Ьр▓╡р▓╛р▓жр▓┐', 'р▓╕р▓ор▓╛р▓Ьр▓╡р▓╛р▓жр▓┐ р▓кр▓Хр│Нр▓╖', 'р▓ор▓╛р▓░р│Бр▓ор▓▓р▓╛р▓░р│Нр▓Ър▓┐ р▓жр│Нр▓░р▓╛р▓╡р▓┐р▓б р▓ор│Бр▓ир│Нр▓ир│Зр▓др│Нр▓░ р▓Хр▓│р▓Чр▓В', 'р▓ир│Жр▓╣р▓░р│В', 'р▓Хр│Кр▓Вр▓Чр│Нр▓░р│Жр▓╕р│Н', 'р▓Яр▓┐р▓Ор▓Вр▓╕р▓┐', 'р▓жр│А', 'р▓нр│Ар▓ор│Н', 'р▓Ьр│И р▓╣р▓┐р▓В', 'р▓╣р▓┐р▓Вр▓жр│Н', 'р▓ор▓ор▓др▓╛', 'р▓╕р│Нр▓Яр▓╛р▓▓р▓┐р▓ир│Н', 'р▓кр│Жр▓░р▓┐р▓пр▓╛р▓░р│Н', 'р▓кр▓┐р▓ир▓╛р▓░р│И', 'р▓╡р▓┐р▓Ьр▓пр▓ир│Н', 'р▓ор│Бр▓Хр│Нр▓др▓┐', 'р▓ор│Лр▓░р│Нр▓Ър▓╛', 'р▓╡р▓┐р▓Хр▓╛р▓╕р│Н р▓╢р│Ар▓▓р│Н', 'р▓Хр│Кр▓Вр▓Чр│Бр▓ир▓╛р▓бр│Б', 'р▓▓р▓╛р▓▓р│Б', 'р▓др│Зр▓Ьр▓╕р│Нр▓╡р▓┐', 'р▓Йр▓кр│Зр▓Вр▓жр│Нр▓░', 'р▓╕р│Кр▓░р│Жр▓ир│Н', 'р▓пр│Жр▓Ър│Вр▓░р▓┐',
        'р┤Хр╡Лр╡║р┤Чр╡Нр┤░р┤╕р╡Н', 'р┤Йр┤к', 'р┤Чр┤╛р┤ир╡Нр┤зр┤┐', 'р┤░р┤╛р┤╣р╡Бр╡╜', 'р┤╕р╡Лр┤гр┤┐р┤п', 'р┤ор╡╗р┤ор╡Лр┤╣р╡╗', 'р┤кр┤кр╡Нр┤кр╡Б', 'р┤жр╡Нр┤░р┤╛р┤╡р┤┐р┤б р┤ор╡Бр┤ир╡Нр┤ир╡Зр┤▒р╡Нр┤▒ р┤Хр┤┤р┤Хр┤В', 'р┤░р┤╛р┤╖р╡Нр┤Яр╡Нр┤░р╡Ар┤п р┤Ьр┤ир┤др┤╛ р┤жр┤╛р╡╜', 'р┤ир┤╛р┤╖р┤гр┤▓р┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р╡Н р┤Хр╡Лр╡║р┤Чр╡Нр┤░р┤╕р╡Н р┤кр┤╛р╡╝р┤Яр╡Нр┤Яр┤┐', 'р┤Ьр┤ир┤др┤╛ р┤жр┤╛р╡╜', 'р┤░р┤╛р┤╖р╡Нр┤Яр╡Нр┤░р╡Ар┤п р┤▓р╡Лр┤Хр╡Н р┤╕р┤ор┤д р┤кр┤╛р╡╝р┤Яр╡Нр┤Яр┤┐', 'р┤Эр┤╛р╡╝р┤Цр┤гр╡Нр┤бр╡Н р┤ор╡Бр┤Хр╡Нр┤др┤┐ р┤ор╡Лр╡╝р┤Ър╡Нр┤Ъ', 'р┤Хр┤ор╡Нр┤ор╡Нр┤пр╡Вр┤гр┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р╡Н', 'р┤ор┤╛р╡╝р┤Хр╡Нр┤╕р┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р╡Н', 'р┤╣р┤┐р┤ир╡Нр┤жр╡Бр┤╕р╡Нр┤ер┤╛р┤ир┤┐ р┤Ер┤╡р┤╛р┤В р┤ор╡Лр╡╝р┤Ър╡Нр┤Ъ', 'р┤╡р┤┐р┤Хр┤╛р┤╢р╡Ар╡╜ р┤Зр╡╗р┤╕р┤╛р╡╗ р┤кр┤╛р╡╝р┤Яр╡Нр┤Яр┤┐', 'р┤ор╡Бр┤╕р╡Нр┤▓р╡Ар┤В р┤▓р╡Ар┤Чр╡Н', 'р┤Ьр╡╗ р┤Ер┤зр┤┐р┤Хр┤╛р╡╝ р┤кр┤╛р╡╝р┤Яр╡Нр┤Яр┤┐', 'р┤╡р┤┐р┤жр╡Бр┤др┤▓р╡И р┤Ър┤┐р┤░р╡Бр┤др╡Ир┤Чр╡╜', 'р┤Ьр┤╛р╡╝р┤Цр┤гр╡Нр┤бр╡Н р┤╡р┤┐р┤Хр┤╛р┤╕р╡Н р┤ор╡Лр╡╝р┤Ър╡Нр┤Ъ', 'р┤╕р╡Нр┤╡р┤╛р┤нр┤┐р┤ор┤╛р┤ир┤┐ р┤кр┤Хр╡Нр┤╖', 'р┤мр┤╛р┤╣р╡Бр┤Ьр╡╗ р┤╡р┤┐р┤Хр┤╛р┤╕р╡Н р┤Жр┤Шр┤╛р┤жр┤┐', 'р┤▓р╡Жр┤ир┤┐р┤ир┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р╡Н', 'р┤Хр╡Зр┤░р┤│ р┤Хр╡Лр╡║р┤Чр╡Нр┤░р┤╕р╡Н', 'р┤╕р╡Лр┤╖р╡Нр┤пр┤▓р┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р╡Н', 'р┤╕р╡Лр┤╖р╡Нр┤пр┤▓р┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р╡Н р┤кр┤╛р╡╝р┤Яр╡Нр┤Яр┤┐', 'р┤ор┤░р╡Бр┤ор┤▓р┤╛р╡╝р┤Ър╡Нр┤Ър┤┐ р┤жр╡Нр┤░р┤╛р┤╡р┤┐р┤б р┤ор╡Бр┤ир╡Нр┤ир╡Зр┤др╡Нр┤░ р┤Хр┤┤р┤Хр┤В', 'р┤ир╡Жр┤╣р╡Нр┤░р╡Б', 'р┤Хр╡Лр┤Вр┤Чр╡Нр┤░р╡Жр┤╕р╡Н', 'р┤жр╡Ар┤жр┤┐', 'р┤нр╡Ар┤В', 'р┤Ьр┤пр╡Н р┤╣р┤┐р┤ир╡Нр┤жр╡Н', 'р┤кр╡Бр┤▒р┤Хр╡Лр┤Яр╡Нр┤Яр╡Н', 'р┤ор┤Вр┤д', 'р┤╕р╡Нр┤▒р╡Нр┤▒р┤╛р┤▓р┤┐р╡╗', 'р┤Хр┤ир┤┐р┤ор╡Кр┤┤р┤┐', 'р┤кр╡Жр┤░р┤┐р┤пр┤╛р╡╝', 'р┤кр┤┐р┤ир┤░р╡И', 'р┤╡р┤┐р┤Ьр┤пр╡╗', 'р┤ор╡Бр┤Хр╡Нр┤др┤┐', 'р┤ор╡Лр╡╝р┤Ър╡Нр┤Ъ', 'р┤╡р┤┐р┤Хр┤╛р┤╕р╡Нр┤╖р╡Ар╡╜', 'р┤Хр╡Кр┤Щр╡Нр┤Хр╡Бр┤ир┤╛р┤Яр╡Н', 'р┤▓р┤╛р┤▓р╡Б', 'р┤др╡Зр┤Ьр┤╕р╡Нр┤╡р┤┐', 'р┤Йр┤кр╡Зр┤ир╡Нр┤жр╡Нр┤░', 'р┤╕р╡Лр┤▒р╡╗', 'р┤пр╡Жр┤Ър╡Нр┤Ър╡Вр┤░р┤┐',
        'риХри╛риВриЧри░ри╕', 'риЙрикри╛', 'риЧри╛риВризрйА', 'ри░ри╛ри╣рйБри▓', 'ри╕рйЛриирйАриЖ', 'риориириорйЛри╣рии', 'рикрй▒рикрйВ', 'рижрйНри░ри╛ри╡ри┐рижри╛ риорйБриирйЗриЯри░ри╛ риХри╛риЬриЧрио', 'ри░ри╛ри╕ри╝риЯри░рйА риЬрииридри╛ рижри╛ри▓', 'ри░ри╛ри╕ри╝риЯри░ри╡ри╛рижрйА риХри╛риВриЧри░ри╕ рикри╛ри░риЯрйА', 'риЬрииридри╛ рижри╛ри▓', 'ри░ри╛ри╕ри╝риЯри░рйА ри▓рйЛриХ ри╕риоридри╛ рикри╛ри░риЯрйА', 'риЭри╛ри░риЦрй░риб риорйБриХридрйА риорйЛри░риЪри╛', 'риХриори┐риКриири┐ри╕риЯ', 'риори╛ри░риХри╕ри╡ри╛рижрйА', 'ри╣ри┐рй░рижрйБри╕ридри╛риирйА риЖри╡ри╛рио риорйЛри░риЪри╛', 'ри╡ри┐риХри╛ри╕ри╝рйАри▓ риЗриири╕ри╛рии рикри╛ри░риЯрйА', 'риорйБри╕ри▓ри┐рио ри▓рйАриЧ', 'риЬрии риЕризри┐риХри╛ри░рйА рикри╛ри░риЯрйА', 'ри╡ри┐рибрйБриери▓ри╛риИ риЪри┐ри░рйВриери╛риИриЧри▓', 'риЭри╛ри░риЦрй░риб ри╡ри┐риХри╛ри╕ риорйЛри░риЪри╛', 'ри╕ри╡ри╛ринри┐риори╛риирйА рикриХри╕ри╝ри╛', 'римри╣рйБриЬрии ри╡ри┐риХри╛ри╕ риЕриЧри╛рйЬрйА', 'ри▓рйИриири┐риири┐ри╕риЯ', 'риХрйЗри░ри▓ри╛ риХри╛риВриЧри░ри╕', 'ри╕риори╛риЬри╡ри╛рижрйА', 'ри╕риори╛риЬри╡ри╛рижрйА рикри╛ри░риЯрйА', 'риори╛ри░рйВриори▓ри╛ри░риЪрйА рижрйНри░ри╛ри╡ри┐рижри╛ риорйБриирйЗридри░ри╛ риХри╛риЬриЧрио', 'риири╣ри┐ри░рйВ', 'риХрйЛриВриЧри░рйЗри╕', 'рижрйАрижрйА', 'ринрйАрио', 'риЬрйИ ри╣ри┐рй░риж', 'ри╣ри┐рй░риж', 'риориоридри╛', 'ри╕риЯри╛ри▓ри┐рии', 'риХриирйАриорйЛриЬри╝рйА', 'рикрйИри░рйАриЕри░', 'рикри┐риири╛ри░ри╛риИ', 'ри╡ри┐риЬрипри╛рии', 'риорйБриХридри┐', 'риорйЛри░риЪри╛', 'ри╡ри┐риХри╛ри╕ри╕ри╝рйАри▓', 'риХрйЛриВриЧриири╛рибрйВ', 'ри▓ри╛ри▓рйВ', 'ридрйЗриЬри╕ри╡рйА', 'риЙрикрйЗриВрижри░', 'рипрйЗриЪрйБри░рйА',
        'рмХрмВрмЧрнНрм░рнЗрм╕', 'рмЧрм╛рмирнНрмзрнА', 'рм░рм╛рм╣рнБрм▓', 'рм╕рнЛрмирм┐рмЖ', 'рмормирморнЛрм╣рми', 'рмкрмкрнБ', 'рмжрнНрм░рм╛рммрм┐рмбрм╛ рморнБрмирнНрмирнЗрмЯрнНрм░рм╛ рмХрм╛рмЬрм╛рмЧрморнН |', 'рм░рм╛рм╖рнНрмЯрнНрм░рнАрнЯ рмЬрмирмдрм╛ рмбрм╛рм▓', 'рмЬрм╛рмдрнАрнЯрмдрм╛рммрм╛рмжрнА рмХрмВрмЧрнНрм░рнЗрм╕ рмкрм╛рм░рнНрмЯрм┐', 'рмЬрмирмдрм╛ рмбрм╛рм▓', 'рм░рм╛рм╖рнНрмЯрнНрм░рнАрнЯ рм▓рнЛрмХ рм╕рмормдрм╛ рмкрм╛рм░рнНрмЯрм┐', 'рмЭрм╛рмбрм╝рмЦрмгрнНрмб рморнБрмХрнНрмдрм┐ рморнЛрм░рнНрмЪрнНрмЪрм╛', 'рмХрморнНрнЯрнБрмирм┐рм╖рнНрмЯ', 'рморм╛рм░рнНрмХрнНрм╕рммрм╛рмжрнА', 'рм╣рм┐рмирнНрмжрнБрм╕рнНрмдрм╛рмирнА рмЖрн▒рм╛рмо рморнЛрм░рнНрмЪрнНрмЪрм╛', 'рммрм┐рмХрм╢рм┐рмд рмЗрмирнН рм╕рм╛рмирнН рмкрм╛рм░рнНрмЯрм┐', 'рморнБрм╕рм▓рм┐рмо рм▓рм┐рмЧ', 'рмЬрми рмЖрмзрм┐рмХрм░ рмкрм╛рм░рнНрмЯрм┐', 'рмЭрм╛рмбрм╝рмЦрмгрнНрмб рммрм┐рмХрм╛рм╢ рморнЛрм░рнНрмЪрнНрмЪрм╛', 'рмПрм▓рм┐рмирм╛ рмХрм╣рм┐рм▓', 'рмХрнЗрм░рм│ рмХрмВрмЧрнНрм░рнЗрм╕'
        ]

    bjp_flags = []
    ing_flags = []

    bjp_keywords = [keyword for keyword in bjp_keywords]
    ing_keywords = [keyword for keyword in ing_keywords]

    for index, row in sourcedata.iterrows():
        text = row['comment_textDisplay']

        bjp_flag = 1 if any(keyword in text for keyword in bjp_keywords) else 0
        bjp_flags.append(bjp_flag)

        ing_flag = 1 if any(keyword in text for keyword in ing_keywords) else 0
        ing_flags.append(ing_flag)

    sourcedata['bjp'] = bjp_flags
    sourcedata['ing'] = ing_flags
    return sourcedata
################################################################################################
#Step11: Remove comments which doesnt attribute to either BJP or Congress
def RemoveCommentswithallFlags0(sourcedata):

    # Drop rows where both "bjp" and "ing" columns have 0 values
    validpartiesdf = sourcedata[(sourcedata['bjp'] != 0) | (sourcedata['ing'] != 0)]
    return validpartiesdf
################################################################################################
#Step12: Remove comments which doesnt attribute to either BJP or Congress
def BlankCommentsRemoval(sourcedata, columnname):

    sourcedata = sourcedata[sourcedata[columnname].str.strip() != '']  # Filter out rows where the column is not blank
    return sourcedata
################################################################################################
#Step13: Identify the regional language based on text comments
DetectorFactory.seed = 0
def Language_Identification(sourcedata, columnname):

    indi_lang = {
        'hi': 'Hindi',
        'bn': 'Bengali',
        'te': 'Telugu',
        'ta': 'Tamil',
        'mr': 'Marathi',
        'ur': 'Urdu',
        'gu': 'Gujarati',
        'kn': 'Kannada',
        'ml': 'Malayalam',
        'pa': 'Punjabi',
        'or': 'Odia'
    }

    def Language_Identification_helper(comments):
        try:
            detected_lang = detect(comments)
            if detected_lang in indi_lang:
                return indi_lang[detected_lang], detected_lang
            return "English", "en"
        except:
            return "unknown", "unknown"

    sourcedata['language'], sourcedata['language_code'] = zip(*sourcedata[columnname].apply(Language_Identification_helper))
    return sourcedata
###############################################################################################
#Step14: Remove the comments with language unknown or not identified
def Unidentified_language_removal(sourcedata):

    # Remove rows with 'unknown' language_code
    validlangdf = sourcedata[sourcedata['language_code'] != 'unknown'].copy()
    return validlangdf
###############################################################################################
#Step15: convert english based comments to lowercase
def English_comments_to_lower(sourcedata, columnname):

    sourcedata[columnname] = sourcedata[columnname].str.lower()
    return sourcedata
###############################################################################################
#Step16: Additional iteration in updating the Roman Script of Indian regional languages
#List of custom words (bag of words) used in identifying the Roman script of indian languages
words_to_check = {
    'Hindi': ['aap','hum','yeh','sur','nat','bhi','jee','koi','aao','kya','maa','har','nit','bal','hai','din','kal','man','mai','tum','dil','mel','bol','hal','aur','kab','ban','hun','lev','hua','dom','bas','lou','kar','mat','dam','nas','nav','dut','gam','dev','rah','git','ram','ras','roz','laal','maaf','naam','raat','jald','maan','paas','rahi','saaf','aage','nach','rais','taap','gyan','gair','maya','dard','hona','jana','upar','liye','mana','chod','prem','band','chal','nayi','bhag','tark','chah','jiye','kuch','patr','tele','kadi','tika','atma','hand','hara','naav','pata','bojh','daak','sang','suru','daal','kaam','bhav','mukh','baat','jaag','urja','baja','dand','hans','nahi','path','dhua','nari','bali','lohe','loka','loni','vrat','jyon','mani','naak','sham','noor','mouj','waqt','zila','chor','kavi','khel','sima','deta','khub','soch','dhan','naya','dukh','lagi','nira','doga','lahu','pani','ekta','data','pita','garv','ghar','mera','desh','teji','raja','roop','rang','haar','kone','gaadi','jaisa','karna','paani','saath','uchit','bheed','garmi','karne','naari','taana','vastu','yatra','dhyan','garam','jaldi','karta','laakh','maang','udyog','khush','chaya','kadam','kuchh','niyam','pyaar','sagar','aankh','aaram','gayak','nayak','parya','yuddh','gyaan','mitti','samay','tarah','cinta','tatha','andar','divas','akeli','chota','bhakt','pauna','satya','jivan','kursi','saneh','avsar','mooch','paida','dalne','janam','kshan','odhni','pankh','upyog','daman','keeda','palna','badan','dhire','lakar','lagta','bagal','hathi','manch','poora','bahut','lagna','namak','varan','jevan','naada','vastr','badal','dhuaa','vidhi','humre','baste','jiwan','jadoo','basti','baten','navin','kabhi','beech','chand','kanha','nipat','bhaav','kajal','bhara','karya','katha','munde','bhool','murti','zarur','mudit','sidhi','daana','khaas','kisan','naadi','khoob','konsa','kiran','nidhi','nanha','sthan','cheta','lajja','paksh','kadar','lamba','patra','dagar','farak','patth','maarg','karan','mahal','khata','takat','kheli','dhaar','khana','tirth','ghoos','khyal','dhatu','goonj','treta','dhood','ruchi','dhool','tukda','haath','sadaa','tyaag','antib','bilkul','dheere','taakat','yahaan','zaroor','chehra','humein','laayak','chetan','saahas','vichar','zubaan','bhasha','takkal','vahaan','chinta','dekhna','sanket','vigyan','dimaag','hansna','sanyog','virodh','makaan','sansay','ashaat','mausam','chupke','vritti','nagari','pallav','unchai','atithi','jalana','nikhar','dharna','haraan','sangam','baccha','hamare','khayal','sanyam','janlev','samaaj','vastav','prabha','baatna','jhapat','lashan','prerna','dhvani','sankat','bahana','dhyaan','vishay','choona','nashta','preeti','sapnaa','vyakti','dhakka','purush','shakti','kahani','shanti','bhajan','kaamna','shreya','yantra','katori','sharir','kavita','keemat','bhojan','khelna','zoorna','kudrat','sparsh','dhoodh','doosra','nirnay','spasht','sundar','daaman','kamaal','nirmal','swapna','kamzor','swasth','dastak','paudha','gathri','peedit','mahila','prayas','swayam','gaurav','prakop','khidki','dharam','raksha','toofan','kirana','rupaya','sachet','rupiya','chahiye','vaastav','achchha','zindagi','hungama','chalana','sandesh','vinamra','koshish','macchar','nivedan','vishram','vishesh','bhashan','duskami','drishya','sacchai','uplabdh','dheeraj','patthar','pragati','sanyasi','vasudha','bandish','barasna','sankhya','bandhna','pradaan','vimarsh','pradesh','santaan','dilwala','vishwas','bhagwan','chetana','vyanjan','chintan','mulayam','bhushan','bhraman','sindoor','chakkar','nischay','nirdesh','pakshap','swabhav','pichhda','prakash','prerana','prishth','dhaaran','dharati','trishna','triveni','uddeshya','parchhai','chutkara','santulan','kvyapaar','samjhana','jhanjhna','dikhlana','prayatna','shikayat','vyavahar','shradhha','kartavya','siddhant','dakshina','bikharna','charitra','pahunche','suraksha','paryatan','taiyaari','tatkalin','ghinouna','parvachan','vichchhed','chopadiya','dhaaranaa','baksheesh','sangharsh','sanrachna','vyavastha','nishpatti','chikitsak','sindhutva','dhakelana','giraftaar','dhanyavaad','niyantraan','pratishodh','swatantrata','pratiyogita','pratispardha'],
    'Bengali': ['alo','ase','din','maa','nai','nei','noy','paa','ami','eto','kya','koi','ato','eta','jao','mar','rup','sei','tui','abar','aati','ache','anek','baal','boli','bose','chai','didi','dike','emon','haan','haat','habe','hobe','jabo','jana','kaaj','keno','kore','kuno','lage','lali','mama','mane','mone','naam','naki','nijo','onno','pujo','saja','suru','vaat','asbe','boro','haoa','pora','saho','thik','amar','tumi','paro','shob','taai','koto','balo','kaal','toke','baba','chul','ghar','hare','jabe','kono','koro','mata','mere','mile','more','moto','name','onek','opor','pare','pele','rate','rong','acche','aasha','achhe','adhik','baaje','bhalo','bhora','chaai','dekhe','dhoro','email','holam','karon','khela','kichu','kotha','lomba','matha','porbe','raate','roilo','snaan','tomay','varsa','ashon','ashte','ashun','bhebe','bhule','chaay','gache','korbe','lagbe','rakho','ekbar','korte','kemon','aache','bolte','tomar','jemon','kemne','kamon','parbe','amake','chele','choto','hashe','kheye','khete','khusi','lojja','mayer','natok','pashe','patha','phire','shuru','thake','tomra','aadhar','aamaar','ananda','ashaay','bhasha','britha','chaalo','chhoto','chokhe','deoyal','gobhir','saathe','avabar','bondhu','hochhe','shomoy','korcho','shathe','bujhte','lagche','kobita','bilkul','dheere','taakat','yahaan','zaroor','chehra','humein','laayak','chetan','saahas','vichar','zubaan','takkal','vahaan','chinta','dekhna','sanket','vigyan','dimaag','hansna','sanyog','virodh','makaan','sansay','ashaat','mausam','chupke','vritti','nagari','pallav','unchai','atithi','jalana','nikhar','dharna','haraan','sangam','baccha','hamare','khayal','sanyam','janlev','samaaj','vastav','prabha','baatna','jhapat','lashan','prerna','dhvani','sankat','bahana','dhyaan','vishay','choona','nashta','preeti','sapnaa','vyakti','dhakka','purush','shakti','kahani','shanti','bhajan','kaamna','shreya','yantra','katori','sharir','kavita','keemat','bhojan','khelna','zoorna','kudrat','sparsh','dhoodh','doosra','nirnay','spasht','sundar','daaman','kamaal','nirmal','swapna','kamzor','swasth','dastak','paudha','gathri','peedit','mahila','prayas','swayam','gaurav','prakop','khidki','dharam','raksha','toofan','kirana','rupaya','sachet','rupiya','apnake','ashena','bangla','dekhte','jibone','school','shudhu','tahole','thakbe','tokhon','tomake','aananda','krishno','opekkha','thaakbe','bhushon','korecho','bujhchi','chahiye','vaastav','achchha','zindagi','hungama','chalana','sandesh','vinamra','koshish','macchar','nivedan','vishram','vishesh','bhashan','duskami','drishya','sacchai','uplabdh','dheeraj','patthar','pragati','sanyasi','vasudha','bandish','barasna','sankhya','bandhna','pradaan','vimarsh','pradesh','santaan','dilwala','vishwas','bhagwan','chetana','vyanjan','chintan','mulayam','bhushan','bhraman','sindoor','chakkar','nischay','nirdesh','pakshap','swabhav','pichhda','prakash','prerana','prishth','dhaaran','dharati','trishna','triveni','lallike','nainaki','urevalo','uddeshya','parchhai','chutkara','santulan','kvyapaar','samjhana','jhanjhna','dikhlana','prayatna','shikayat','vyavahar','shradhha','kartavya','siddhant','dakshina','bikharna','charitra','pahunche','suraksha','paryatan','taiyaari','tatkalin','ghinouna','facebook','protidin','porporle','sheshtai','parvachan','vichchhed','chopadiya','dhaaranaa','baksheesh','sangharsh','sanrachna','vyavastha','nishpatti','chikitsak','sindhutva','dhakelana','giraftaar','jolkhabar','dhanyavaad','niyantraan','pratishodh','swatantrata','pratiyogita','bondhuchara','pratispardha'],
    'Telugu': ['mee','adi','ani','idi','ela','oka','emi','naa','tho','adu','ala','baa','edo','haa','ila','jey','ooh','ore','nenu','kuda','kani','idhi','inka','vala','ante','adhe','okka','aame','adhi','anta','arey','ayyo','levu','leka','sepu','tosi','aaga','aena','aina','aite','amma','atla','ayya','eyyi','gari','hari','inni','itla','jaya','kala','keka','kodi','mari','menu','memu','raja','sari','seva','tanu','kosam','kooda','manam','avunu','aithe','ledhu','tappa','vaadu','kotha','kante','vaadi','ninnu','emito','pedha','kadaa','nannu','adugu','baaga','cheri','daani','desam','dhani','intlo','meeku','meeru','nijam','nundi','okati','oorlo','paalu','paata','pilla','prema','sagam','saavu','seema','sodhi','sompu','tunne','abbay','anthe','asalu','bandi','bhalu','chesi','chota','frnds','gaali','goppa','ipudu','jeyya','kayya','lokam','okaru','osaru','pedda','randi','satya','sarle','srinu','thodu','tholi','vachi','valla','yenti','yokka','unnadu','unnaru','antaru','enduku','avarku','avanni','assalu','baadha','dagara','ichina','illalu','intiki','jarige','kaadhu','kaalam','kastha','manasu','mundhu','panulu','raadhu','rojuki','tosina','vaalla','aasalu','andaru','appudu','bagane','badulu','bayata','bhayya','bhoomi','cheyya','chinna','cinema','dhanni','eyyaru','eyyava','gelavu','guruvu','kavali','lopala','madham','modati','mohini','nenuve','perugu','thindi','vandha','vasthe','cheyali','andamga','kakunda','tappaka','kothaga','matrame','untaadu','istharu','chesina','peddaga','abaddam','maamulu','thakuva','vaadini','padithe','padandi','aasaalu','adugunu','chotuga','dengina','dengali','doshamu','endhuku','evariki','kathalu','kevalam','kshanam','maarina','nijamga','praanam','prajalu','rakanga','rakunda','saraina','sontham','vundali','adugulu','aduthey','dhayyam','gaalilu','gattiga','krishna','madyalo','nenunte','pillalu','rambabu','tarvata','lallike','nainaki','urevalo','mimmalni','avakasam','vachindi','kalisina','cheppanu','anukunta','cheyadam','veskondi','aadarana','avasaram','bhootulu','chudandi','daggarai','erripuka','manchiga','okkasari','paatedhi','padipoya','penchaga','pothunna','prakhyam','prakrame','prayanam','saradaga','sarvasva','vaallaki','vadalara','vishayam','dikhlana','prayatna','shikayat','vyavahar','shradhha','kartavya','siddhant','dakshina','bikharna','charitra','pahunche','suraksha','paryatan','taiyaari','tatkalin','ghinouna','chebuthe','cheyyaru','dhaaniki','jeyyaaru','nenulaki','peddamma','thakkuva','facebook','protidin','porporle','sheshtai','parigetti','vasthundi','chesinatu','avvakasam','kavalsina','raasindhi','antunnaru','cheyyandi','adigindhi','antunnadu','istharani','bauntundi','chinnappa','daridrapu','jeevitham','jolliestu','kalavatha','padutunna','palukutho','prakharam','preminchu','sakshanga','simhiyalu','vichitram','parvachan','vichchhed','chopadiya','dhaaranaa','baksheesh','sangharsh','sanrachna','vyavastha','nishpatti','chikitsak','sindhutva','dhakelana','giraftaar','jabardast','jarigindi','meerulaki','jolkhabar','theeskondi','isthunnaru','adugutundi','isthunnanu','brathakali','chesthunna','kaaranamga','prushottam','regincharu','sandarbham','dhanyavaad','niyantraan','pratishodh','isthunnaadu','vasthunnaru','telusthundi','aaparaadham','dorakatledu','jeevithamlo','marichipoya','paatinundhi','paristhithi','swatantrata','pratiyogita','gelusthunna','lekhinchuko','srimanthudu','thoguthundi','bondhuchara','chesthunnaru','kanipettandi','chepthunnadu','bhayapettina','emaipothunna','jaruguthundi','kanipincheru','modatinunchi','pratispardha','chesthunnaadu','anukuntunnanu','maatladuthunu','sambandhinche','choosthunnaadu','aalochinchandi'],
    'Tamil': ['nan','ida','kai','vaa','kal','kol','kan','poy','men','mun','oru','sav','sol','svk','idu','por','pul','vil','aal','maa','nee','yen','avan','aval','illa','athu','podi','peru','vaai','vidu','seer','vitu','meel','ulla','mara','pada','aana','aaha','adhu','anbu','chol','eppo','etho','inge','ippa','ival','ivar','kaal','kana','koor','keer','naan','neer','nool','onru','osai','oyil','paal','paar','pasi','savu','seri','epdi','ithu','kann','koll','maan','meip','puvi','ravu','soll','than','thol','maip','aadu','aatu','avar','ayya','enna','enru','kelu','kodi','kudi','laam','siru','veru','intha','alavu','nalla','sollu','kooda','veesu','pottu','solla','aasai','nilai','porul','solli','aanal','avaru','boomi','engal','enjoy','indha','jolly','kalvi','kanda','kaval','kadal','koduk','kurai','maari','mahan','magan','manam','mella','mozhi','naadu','nalam','ninga','padal','padam','pagal','pothu','pudhu','raaja','ruchi','saara','sadai','samam','selai','surya','tamil','tarum','thaan','thala','endru','engum','ethai','payir','peyar','saami','sanda','there','illai','keezh','kuyil','pokku','ponnu','rasam','velai','vetti','aatam','avala','ennai','innum','kelvi','kovil','meeru','mokka','namma','naanu','neevu','paaru','summa','ungal','unmai','unnai','venum','yethu','neeyum','thaane','eppadi','aanaal','anuppu','thayir','unakku','enakku','suzhal','veettu','piragu','pakkam','selavu','thothu','umakku','vaikku','agalam','baasha','badhil','chithi','ippadi','ivarai','jeevan','kanavu','keerai','kollai','iyalbu','kangal','makkal','mazhai','moolai','mudhal','nanban','nandri','nangal','needhi','nirkka','parisu','poonga','raatri','sandai','thanni','kaalai','karuvi','kilavi','parvai','poonai','sakthi','seemai','selvam','thatha','ratham','thanga','tharum','thedum','irukku','iruvar','kaattu','kathai','kathir','konjam','maanam','maattu','neenga','oruvar','paavam','periya','panniru','thavira','irukkum','migavum','kevalam','vilakke','veliyil','petraar','poorvam','vayathu','vilakka','pattaam','athigam','amaippu','avanuga','azhudhu','ethuvum','ippavum','iyakkam','kadhali','kanneer','kavalai','kodutha','irunthu','karuthu','manaivi','marakka','munneer','odhunga','paartha','paarvai','payanam','sooriya','sundari','thangam','kadalai','kadavul','kurippu','magimai','manidha','maranam','rasathi','sappadu','thanjam','kodumai','puthusu','senthil','thanjai','avargal','enpathu','irukken','iruppin','ithuvum','mudiyum','naankal','nammaku','samayal','samayam','solriya','thamizh','unpathu','valathu','illaamal','tharuvom','illaatha','thiruppi','mukkiyam','kudumbam','parandhu','thiruthi','pannalam','purindhu','aruginra','pannunga','kalakkal','kavingar','kidaikka','ivarukku','manathil','mannavan','marundhu','puthumai','tharunam','ivalavil','kannamma','puthagam','thirudan','irupathu','kulithal','sandroru','thodarbu','yosithan','aarambam','avudaiya','kozhambu','marupadi','munnaadi','naanukku','sollunga','solvathu','tholaikka','aarambham','kaalathai','madhiyaal','nannaivar','sandhippu','thagappan','mazhaiyil','ragasiyam','kanavugal','magizhchi','avarkalai','engalukku','irunkiren','naanungal','periyavar','ungalukku','paravaigal','bhagavatha','kuzhandhai','olarvaatha','paarkalaam','makizhndhu','ratchasiya','tharavidai','vilaiyattu','azhaikanum','neengaluku','sugathiram','irukkirathu','padikkiraan','kudikkiraan','kottindraar','kodukkiraar','kodukkiraan','aarambhikka','nadanthathu','nedunthadhu','rajinikanth','marupadiyum','pudhupettai','neengalukku','puriyavillai','anaivarukkum','sooriyanaaru','yethentruyil','solvadhillai','kandupidippom','sagodharargal','virumbukirathu','kaattirukkirathu','koduthirukkiraan','maranthirukkirathu'],
    'Marathi': ['ahe','ani','kal','nay','dil','kay','aai','aaj','aas','bag','dar','dev','dur','has','jag','jau','kha','lat','mol','vel','sap','sut','zep','mala','kasa','sang','kaay','kase','asla','khar','pani','dili','aala','nahi','kela','tula','gheu','yete','raha','asli','kaam','kahi','kele','karu','aho','ala','ali','ari','asa','asi','ata','aani','aata','amhi','ahaa','amba','amha','anek','baba','bahu','bala','bhat','bhas','chal','dada','fakt','gela','ghar','ghon','haat','hasu','hona','hoti','jaau','jaga','jeve','jhal','jati','kaal','keli','khan','khup','lage','lagn','lakh','maan','mann','mast','maza','mazi','nako','vaat','vish','puja','roka','sant','sarv','thav','ubha','saath','aaple','kaahi','sagla','majhe','kuthe','tyala','bagha','sagle','sangu','disat','ajab','akal','alag','amaa','amar','anga','anya','apla','aple','apli','apun','asud','aamhi','aapan','accha','agadi','ajuba','anand','ajaba','aatak','aakul','aanek','aarth','adhik','badal','baher','bahin','bhaag','bhaav','chhan','chaar','darja','dekhu','divas','dolya','durga','fayda','fokat','gaaon','gosht','gotra','jatee','jhali','kadha','kadun','kalat','kamal','karun','khara','maaji','maane','madat','majha','naahi','naate','navin','vadal','vakta','vhaag','vilas','chowk','latur','punha','paisa','prera','punah','punar','sapna','sathi','sathe','savin','thamb','thaya','upyog','vrudh','zepun','majhya','jhaale','shakto','milale','shakti','mhatla','aaplya','saathi','kuthhe','shikli','milala','tyacha','aaval','agale','aikya','ajali','ajata','amule','anang','anant','angat','anjay','artha','asach','ashat','asita','asudh','ayush','adhika','aamcha','aadhar','aagman','aanand','amucha','arthik','adbhut','aghadi','acchaa','bagait','balaka','bhaaji','bhojan','chaalo','dolyaa','geleli','ghevun','jeevan','keleli','laagal','lakhun','lavkar','mannat','mhanun','nantar','nantre','vachan','vaidya','vishay','vividh','mhanje','prayog','pushpa','rakhun','rustom','sanman','sathev','swagat','tvacha','tumhala','prashna','kuthlya','aamhala','rahasya','kaarane','amchya','anasha','anjali','anupam','apunle','arogya','asleel','asmita','asunuk','atavar','athava','athvan','abhyaas','amuchya','aakshar','aarthik','aananda','aadarsh','aabhaar','barobar','bhajani','bhraman','chukoon','darshan','hijaade','kashala','maulana','vinanti','waastaw','prerana','saangun','sahitya','sampati','sweekar','swataha','thambun','vaachan','watpade','sangitla','jhalayla','sangitli','shikshan','adarsha','adnyaat','alaukik','angikar','anubhav','anukram','anusara','anyavar','apeksha','apharan','aphilan','athavan','ayushya','aamuchya','abhimaan','abhipray','gadhadya','gandhiji','gharchya','jagachya','khushaal','lahanpan','wavering','randhawa','sangitale','dakhavata','alankaar','anarghya','anubhava','anukampa','anusaran','apekshit','aradhana','asankhya','aakrandan','aashirwad','aakrandit','abhipraya','bhavishya','karnyacha','mumbaichi','sangharsh','swatantra','vatavaran','apunyapas','asachahe','asudhahe','bhrunhatya','gadhvachya','instrument','mumbaichya','anyavastha','asudhasel','atishuddha','abhyaasacha','anusarkeli','asudhaslya','asunukasel','angikarkeli','arthashastra','asunukaslya','angikarkarun'],
    'Urdu': ['mai','aap','hai','kya','yeh','par','kar','iss','aur','jis','bhi','tum','dil','sab','koi','kam','hun','rha','rhi','aag','aah','hum','log','maa','nah','umr','uss','woh','aib','nau','tha','aaj','asi','ata','ati','aye','bai','but','dar','din','dum','mein','hain','kiya','hota','agar','kaam','kuch','kyun','dard','wakt','acha','baar','sath','kisi','apna','bana','uska','unka','jana','phir','aana','apne','usne','unki','haan','pari','meri','mujh','raha','rahi','aage','aate','aati','aaya','aaye','adaa','faiz','haal','khul','laal','lafz','lage','lahu','liye','maan','maut','mere','munh','naam','nahi','paas','raah','raaz','rooh','saba','sada','soch','wafa','alag','ansu','asar','badi','chup','dafn','date','fana','fikr','gair','gham','ghar','gila','hala','ishq','jaan','jama','kash','laut','lime','lutf','maat','ruju','saja','shak','suna','zaat','adab','chot','daam','deta','husn','jurm','khat','maah','maal','aisa','aisi','ajab','alas','aman','ankh','bala','beta','bich','bura','daag','dagh','dukh','duri','yahan','kuchh','kaise','mujhe','dunya','tarah','dusra','karna','larka','larki','tumhe','taqat','sakta','sakti','maine','aapas','faqat','fikar','haath','habli','hafiz','havaa','khush','lagta','lekin','milti','naqsh','pahle','pehle','rooth','sapna','shauq','subah','udhar','umeed','waada','aankh','afsos','ajeeb','aksar','alfaz','ambar','aqsar','araam','azaad','bahar','bahut','chand','dilon','ehsas','hadsa','irada','jahan','judai','karam','khwab','laund','nahin','naseb','nasib','sabab','sahib','sajde','shair','sunte','surat','udasi','ujala','zeest','zuban','afwah','anban','arman','aurat','baita','dafan','daman','dinon','diqat','firqa','garaj','gusht','irade','jaaiz','kalma','khauf','khayr','likha','aapna','achha','adaab','aisay','akela','akhir','ameer','anmol','asman','asrar','ateet','atish','awaaz','bacha','badla','badle','bahot','behad','belam','betab','bijli','burai','burna','dagha','dekha','dosti','bilkul','zaroor','aakhir','aaraam','ghazal','haafiz','haasil','hadees','halaat','haseen','khwaab','maanta','maarna','nafrat','naseeb','piyaar','qudrat','tanhaa','afwaah','akhiri','baithe','bayaan','bedaad','doosri','faasla','haazir','haveli','iltija','inteha','khabar','khushi','khyaal','maamla','mayoos','munsif','mutaal','napaak','qusoor','siyaah','sunkar','taaluq','thakan','tufaan','ummeed','aasman','aayaat','afsona','aftaab','alfaaz','almari','aqwaal','aziyat','bahana','bhookh','dulhan','duniya','ehsaas','hazaar','hijaab','imkaan','ilaahi','insaan','jalebi','jawaab','khabri','mareez','masail','mehfil','moorat','muflis','mutalq','aapnay','adhuri','ajnabi','alvida','ankhon','anjaan','anjali','asmani','astana','bai-ji','bejaan','bemari','benaam','beshak','beshaq','bewafa','bidaar','bidesi','bilakh','chehra','chhota','chhoti','chumma','dekhna','dekhti','dekhte','doston','hairaan','mehmaan','musafir','sunehri','talaash','tehzeeb','zamaana','zindagi','amaanat','amreeka','aurtain','bewafai','faryaad','haaziri','ijaazat','mojaiza','munasib','mushkil','musibat','raushan','riwayat','safeena','shaukat','tasweer','aanchal','adaalat','afwaahe','akhbari','ambwari','anjuman','baghair','chandni','ijtimaa','irshaad','masroof','mehkuma','munafiq','aitbaar','badnaam','badnami','barsaat','bekarar','bekhauf','bekhudi','bemisal','beqarar','burhapa','burhapy','charagh','chashma','chubhti','daikhna','darogha','dilruba','aazmaish','mehrbani','mulaqaat','nazaakat','paimaane','sharafat','behisaab','imtihaan','mohabbat','naqaabil','pakeezah','pareshan','samandar','tamaasha','tanaffur','tashreef','baahisht','charaagh','intezaar','awarapan','bahut-sa','bahot hi','bardasht','bekhabar','beniyaad','beparwah','darkhast','darwaaza','khwaahish','maashooqa','nigaahein','intikhaab','khairiyat','badmaashi','hoshyaari','istiqlaal','khazaanaa','asaathiya','badi waqt','beikhtiar','chhoti si','darmiyaan','dekha hua','dilrubaai','ashiyaanaa','aisi tarah','bahut zada','but-parast','dard-e-dil','dekhti hui','dil-e-wafa','dil-o-jaan','dukh-e-dil','asar-e-wafa','ata-ul-faiz','awaaz-e-dil','chhoti umar','dafa-e-ishq','dard-e-ishq','dard-e-wafa','dil-e-nazuk','dukh-e-wafa','badi mushkil','bahut zaruri','chhoti ulfat','dard-e-sitam','dukh-e-jahan','bahut zaroori','bilakh-bilakh','dekhte-dekhte','dekhte-dekhti','asar-e-mehboob','bahut pyaar se','dekhte-dekhtay','darkhast-e-ishq','dil-e-nazuk-e-ishq'],
    'Gujarati': ['ema','kya','che','ane','kem','aap','hoi','thi','kai','maj','shu','cho','koi','laj','nai','nav','oli','evu','naj','nik','por','pun','roj','ame','are','ave','bag','bol','evi','tel','des','han','hun','mel','vat','vay','kaj','mul','sau','tame','chhu','etla','kari','chho','rahe','vaat','hova','natu','maal','karu','hase','chhe','game','hoyo','kaho','kare','raha','haru','bura','besu','choo','jovu','kaya','kevi','loko','mari','masu','navu','puja','raas','rite','ruso','thay','toon','vato','janu','joya','kajo','karo','lakh','laav','lage','maja','mast','moti','motu','naam','phal','pote','pray','rato','shak','sukh','vadh','vish','ajab','amne','biji','etle','javu','lovu','rath','sath','seva','shri','vari','vaid','vhal','bhir','dhan','divs','evan','halt','jova','kone','mane','nava','path','same','sane','soni','tale','varg','agad','ekta','faje','feni','gidh','javi','koni','loha','mate','mine','mota','nahi','nath','vayu','maate','shako','bhale','ghana','ramat','thase','koine','sharu','badhu','bhaji','bolvu','dabbo','dheku','jamva','kadhi','karvu','kashu','ketlu','kharu','laadu','mathi','methi','mithu','nathi','phodi','pishi','saaru','Shano','swaad','upmaa','vagar','vandu','vilay','aamka','aapvu','aathu','aavso','janya','kahvu','lakhu','lahan','lapet','palav','pujar','puvar','ratri','vahen','badha','bagay','darni','divas','jaher','jarur','jyare','kadak','kahee','kevay','laher','nathu','rojnu','svadu','vagad','avtar','bhedu','botad','chana','desma','dikri','jagma','khena','nakko','nirav','pauna','pehlu','rashi','ratan','rotlo','sovak','vikas','amare','desni','faraj','halol','india','jaman','kamna','lasan','lokta','melaa','naram','palan','rasoi','ratva','sompu','vadhu','tamara','khabar','sharab','bakadu','kariye','naathi','paneer','pranam','vachan','varsad','abhaag','ishwar','karine','khichu','maarnu','nishan','rajkot','salaah','swaadu','tempik','vanday','vilamb','aadhik','aaviye','apnavu','asarvu','damani','dhvani','dhokla','nimitt','nirnay','oldage','padavo','pakshi','sarkar','wisdom','abhyas','agrahy','bhaili','bhurak','chodvu','dagmag','kutchh','mariyu','pragat','shriji','vichar','akhand','bagdum','dhokra','divase','jagran','sanket','shakha','soorna','trance','vishay','bharela','chokari','dhandho','khandvi','khichdi','pragati','vadhare','vargani','vartavo','wartime','kharaab','kharedi','mysooru','navsari','shikhar','thaatha','vandana','vartman','vichaar','vitaran','vrushti','aayojit','ishware','mathama','pehchan','shaamak','vadhana','vartalo','village','adhunik','devgadh','hanuman','panchma','aradhya','baharva','itihaas','marvaad','mulakat','nishtha','sukhkar','vicharo','vikasak','bhakhari','dandvatu','nishaani','samajhvu','varshaam','aksharvo','khichadi','vicharan','dhandhal','suvichar','vartaman','villayat','avinashi','prayogik','varganim','bhavishya','ghamadhna','shyamahoo','ladakvaya','mazamaaze','vicharano','anandkand','parikrama','savaarish','sukhakari','salaamati','punyannand','icchapurti','punyabhumi','dhandhalya','nirikshana','prernapurna','khushamadee','punyabhoomi','shubharambh','randhikkaran'],
    'Kannada': ['idu','adu','ene','illa','mele','eega','nivu','hege','beku','hosa','yenu','yava','ella','naanu','nimma','yaava','yaake','neenu','avaru','nimge','maadi','tumba','haage','enadu','yella','haagu','neeve','yaaru','namma','neevu','saaku','naavu','aagide','namage','ellide','ellavu','madhya','madhye','barutte','anisutte','maadiddiya'],
    'Malayalam': ['ini','nee','oru','pal','kai','njan','illa','aara','avan','athu','enne','ende','ente','aaru','undu','aanu','avar','entha','enthu','aranu','venam','athil','koodi','ningal','thanne','ingane','kaanam','aarude','karuthi','sahayam','cheiythu','koduthal','cheyyuka','enthelum','kudumbam','prashnam','pattonnu','ningalude','arikkilla','irikkanam','santhosham','aayirikkanam','kandupidichu','samsarikkunnu','paranjirunnilla','cheiythirunnilla'],
    'Punjabi': ['eta','ahe','eti','hai','pai','hei','att','cha','dil','fer','hun','jee','nhi','par','vai','bas','hoi','aan','nai','eho','hor','rab','deo','ice','ujj','tume','kaun','heba','kari','kahi','agge','assi','bhut','boli','ghar','haan','hass','hoya','jatt','kadd','khad','kujh','kuri','mann','menu','mera','meri','nahi','vali','vich','teri','wand','chaa','dass','daru','gedi','rabb','ankh','door','ishq','jeha','boot','hoye','paro','brar','dayi','kamb','patha','bhala','etiki','bhalo','balle','chaan','cheez','dhyan','ditta','fikar','gabru','haasa','kammi','kardi','khani','kinni','kitta','laggi','laina','lambi','mainu','majaa','mithi','vadde','saanu','thodi','turdi','janda','haigi','dassi','hunda','bulli','daaru','disdi','sajna','akhan','hoigi','kinna','paake','vekhi','bacha','billo','chete','chhad','hassi','lagge','maape','hunde','boldi','chhan','dekho','heavy','karan','lutti','paiye','vaari','bhabi','dasso','dukhi','gaana','kemiti','hauchi','hebaku','tumaku','parilu','aayaan','dekhdi','ghumdi','hassdi','khaana','luteya','nakhra','punjab','vekhna','tuhada','painde','changa','brinda','channa','mainnu','tuhanu','bhutta','changi','jeonde','kacche','khushi','aashiq','bhangra','charhda','chhutti','balliye','teriyan','punjabi','valiyan','vanjhali','vaddeyan','mutiyaran'],
    'Odia': ['aau','ama','hei','jau','asi','hau','jiu','oka','aru','asa','odi','ori','naa','sei','aap','abe','aha','aja','ala','api','ari','aum','bapa','asti','boli','asta','ithi','pain','sabu','tame','tora','aaji','anna','bapu','bati','khia','loka','mane','jiba','mote','odia','thae','aama','hela','siba','nahi','suna','aaja','aala','aame','abhi','alag','alai','amar','anya','apye','atma','bhala','chhai','odhia','chali','poila','naahi','bhalo','sathi','thili','amaku','chhua','dusta','thata','amara','artha','asiba','jiban','aapna','achha','adugu','ahare','ajeya','alada','amate','anand','aneka','anila','arati','asana','chhata','jeeban','paithi','sasthi','bandha','lagila','asuchi','bhaaji','kanhei','rahilu','bhanga','hauchi','karibe','thatha','rauchi','aitare','alaita','alpana','amruta','ananta','ananya','anesha','aniket','animan','anyata','apiuna','apurna','aputra','arogya','asatya','asmita','asurya','avidya','dekhilu','karuchi','bihanga','dekhela','rakhiba','boluchi','chadhei','rahuchi','adbhuta','alaakhi','alahasa','alaukik','alokika','aniyata','anubhav','anusara','anupama','ashubha','asuddha','astitva','aumkara','avastha','avinita','avirati','avyakta','alaghana','alochana','aneshana','anindita','aniruddh','anyatara','apavarga','aradhana','atmatapa','aupasana','annapurna','jaukanthi','anukarana','anusarana','apaharana','aparajita','apasiddha','atmajnana','atmavidya','aupadhika','anantatapa','anekanetra','aneshapana','apasavadhi','asmitatapa','asuravrata','atmavritti','anantajnana','anilashakti','anupamaguni','atmanishtha','avasthapana','aviratatapa','avyaktatapa','animanishtha','apurnashakti','asmitavritti','aniruddhatapa','aviratavritti','avyaktavritti','anubhavashakti','aniruddhashakti','aniruddhavritti']
}

def Custom_language_detection(ytcomment):

    for language, words in words_to_check.items():
        for word in words:
            if word in ytcomment['comment_textDisplay']:
                ytcomment['language'] = language
                return ytcomment
    return ytcomment
###############################################################################################
#Step17: Additional iteration in updating the language code of Indian regional languages based on step13
#Languages list which are considered for analysis
Language_lookup = {
    'language': ['English', 'Hindi', 'Bengali', 'Telugu', 'Tamil', 'Marathi', 'Urdu', 'Gujarati', 'Kannada', 'Malayalam', 'Punjabi', 'Odia'],
    'lang_code': ['en', 'hi', 'bn', 'te', 'ta', 'mr', 'ur', 'gu', 'kn', 'ml', 'pa', 'or']
}
Language_lookup = pd.DataFrame(Language_lookup)
def Custom_language_code_mapping(ytcomment):

    language = ytcomment['language']
    if language in Language_lookup['language'].tolist():
        lang_code = Language_lookup[Language_lookup['language'] == language]['lang_code'].values[0]
        ytcomment['language_code'] = lang_code
    return ytcomment
################################################################################################
#Step18: Identify the Indian stop words and remove
def IndicProfanityWordsRemover(Sourcedata):

    custom_profanitywords = ['рдЖрдВрдбрд╝', 'рдЖрдВрдб', 'рдЖрдБрдб', 'рдмрд╣рдирдЪреЛрдж', 'рдмреЗрд╣реЗрдирдЪреЛрдж', 'рднреЗрдирдЪреЛрдж', 'рдмрдХрдЪреЛрдж', 'рдмрдХрдЪреЛрджреА', 'рдмреЗрд╡рдбрд╝рд╛', 'рдмреЗрд╡рдбрд╝реЗ', 'рдмреЗрд╡рдХреВрдл', 'рднрдбрд╝реБрдЖ', 'рднрдбрд╝рд╡рд╛', 'рднреЛрд╕рдбрд╝рд╛', 'рднреЛрд╕рдбрд╝реАрдХреЗ', 'рднреЛрд╕рдбрд╝реАрдХреА', 'рднреЛрд╕рдбрд╝реАрд╡рд╛рд▓рд╛', 'рднреЛрд╕рдбрд╝реАрд╡рд╛рд▓реЗ', 'рдмрдмреНрдмреЗ', 'рдмреВрдмреЗ', 'рдмреБрд░', 'рдЪрд░рд╕реА', 'рдЪреВрдЪреЗ',
                             'рдЪреВрдЪреА', 'рдЪреБрдЪреА', 'рдЪреЛрдж', 'рдЪреБрджрдиреЗ', 'рдЪреБрджрд╡рд╛', 'рдЪреБрджрд╡рд╛рдиреЗ', 'рдЪрд╛рдЯ', 'рдЪреВрдд', 'рдЪреВрддрд┐рдпрд╛', 'рдЪреБрдЯрд┐рдпрд╛', 'рдЪреВрддрд┐рдпреЗ', 'рджрд▓рд╛рд▓', 'рджрд▓рд▓реЗ', 'рдлрдЯреНрдЯреВ', 'рдЧрдзрд╛', 'рдЧрдзреЗ', 'рдЧрдзрд╛рд▓рдВрдб', 'рдЧрд╛рдВрдб', 'рдЧрд╛рдВрдбреВ', 'рдЧрдВрдбрдлрдЯ', 'рдЧрдВрдбрд┐рдпрд╛', 'рдЧрдВрдбрд┐рдпреЗ', 'рдЧреВ', 'рдЧреЛрдЯреЗ', 'рд╣рдЧ', 'рд╣рдЧреНрдЧреВ', 'рд╣рдЧрдиреЗ', 'рд╣рд░рд╛рдореА',
                             'рд╣рд░рд╛рдордЬрд╛рджрд╛', 'рд╣рд░рд╛рдордЬрд╝рд╛рджрд╛', 'рд╣рд░рд╛рдордЬрд╛рджреЗ', 'рд╣рд░рд╛рдордЬрд╝рд╛рджреЗ', 'рд╣рд░рд╛рдордЦреЛрд░', 'рдЭрд╛рдЯ', 'рдЭрд╛рдЯреВ', 'рдХреБрддреНрддрд╛', 'рдХреБрддреНрддреЗ', 'рдХреБрддрд┐рдпрд╛', 'рдХреБрддреНрддреА', 'рд▓реЗрдВрдбреА', 'рд▓реЛрдбрд╝реЗ', 'рд▓реМрдбрд╝реЗ', 'рд▓реМрдбрд╝рд╛', 'рд▓реЛрдбрд╝рд╛', 'рд▓реМрдбрд╛', 'рд▓рд┐рдВрдЧ', 'рд▓реЛрдбрд╛', 'рд▓реЛрдбреЗ', 'рд▓рдВрдб', 'рд▓реМрдВрдбрд╛', 'рд▓реМрдВрдбреЗ', 'рд▓реМрдВрдбреА', 'рд▓реМрдВрдбрд┐рдпрд╛', 'рд▓реБрд▓реНрд▓реА',
                             'рдорд╛рд░', 'рдорд╛рд░реЛ', 'рдорд╛рд░реВрдВрдЧрд╛', 'рдорд╛рджрд░рдЪреЛрдж', 'рдорд╛рджрд░рдЪреВрдд', 'рдорд╛рджрд░рдЪреБрдд', 'рдордореНрдореЗ', 'рдореВрдд', 'рдореБрдд', 'рдореВрддрдиреЗ', 'рдореБрддрдиреЗ', 'рдореВрда', 'рдореБрда', 'рдиреБрдирдиреА', 'рдиреБрдирдиреБ', 'рдкрд╛рдЬреА', 'рдкреЗрд╕рд╛рдм', 'рдкреЗрд╢рд╛рдм', 'рдкрд┐рд▓реНрд▓рд╛', 'рдкрд┐рд▓реНрд▓реЗ', 'рдкрд┐рд╕рд╛рдм',
                             'haraamzyaada', 'haraamjaada', 'haraamjaade', 'haraamzaade', 'bhosdiwala', 'bhosdiwale', 'haramzyada', 'haraamkhor', 'madarchodd', 'madarchood', 'madarchoot', 'bahenchod', 'behenchod', 'bhenchodd',
                             'bhonsdike', 'chudwaane', 'gadhalund', 'haramjada', 'haramkhor', 'madarchod', 'madarchut', 'porkistan', 'bhenchod', 'bakchodd', 'bakchodi', 'bevakoof', 'bewakoof', 'bhosdike', 'bhosdiki', 'chudwane',
                             'laundiya', 'loundiya', 'bakchod', 'bevkoof', 'bewkoof', 'bhaduaa', 'bhadvaa', 'bhadwaa', 'bhosada', 'bhosdaa', 'chooche', 'choochi', 'chudney', 'chudwaa', 'chutiya', 'chutiye', 'gandfat', 'gandfut',
                             'gandiya', 'gandiye', 'kuttiya', 'laundey', 'marunga', 'peshaab', 'bevdey', 'bewday', 'bevkuf', 'bewkuf', 'bhadua', 'bhadva', 'bhadwa', 'bhosda', 'babbey', 'charsi', 'chuchi', 'chudne', 'chudwa', 'chutia',
                             'dalaal', 'dalley', 'hagney', 'harami', 'jhaatu', 'kuttey', 'kutiya', 'laudey', 'launda', 'lounde', 'laundi', 'loundi', 'mammey', 'mootne', 'pesaab', 'peshab', 'pillay', 'pilley', 'pisaab', 'bevda', 'bewda',
                             'babbe', 'bubey', 'buurr', 'chhod', 'chodd', 'chaat', 'choot', 'chute', 'dalal', 'dalle', 'fattu', 'gadha', 'gadhe', 'gaand', 'gandu', 'gotey', 'gotte', 'haggu', 'hagne', 'jhaat', 'jhatu', 'kutta', 'kutte',
                             'kutia', 'kutti', 'landi', 'landy', 'laude', 'laura', 'lauda', 'lulli', 'mamme', 'mutne', 'mooth', 'nunni', 'nunnu', 'paaji', 'pesab', 'pilla', 'pille', 'pisab', 'pkmkb', 'raand', 'randi', 'randy', 'tatte', 'tatti', 'tatty',
                             'otha', 'punda', 'poolu', 'koothi', 'thevudiya', 'thevdiya', 'oombu', 'oombhu', 'sunni', 'sappi', 'omala', 'thuma', 'baadu', 'lavada', 'muttal', 'thayoli', 'suthu', 'poda',
                             'dengu', 'bosudi', 'modda', 'gudda', 'pooku', 'lanja', 'erugu', 'lafoot', 'nihar', 'sulli', 'sachinoda', 'vedhava', 'vattakai'
                             'poore', 'maire', 'kunne', 'mairu', 'kunna', 'appikunna', 'beejam', 'chandi', 'dushtan', 'mandu', 'masa', 'mola','myir', 'myre', 'ookki', 'parii','pooru', 'theetam', 'thendi',
                             'baand', 'batti', 'benne', 'betta', 'bidde', 'bidko', 'bitti', 'bitri', 'blade', 'bolsu', 'chela', 'chool', 'dabba', 'dengu', 'devru', 'diggu', 'dumki', 'gaala', 'gedde', 'goota', 'guggu', 'guldu', 'gundu', 'hadsu', 'hakki', 'hudgi',
                             'jujbi', 'juttu', 'kaadu', 'kaage', 'kadar', 'kaddi', 'katte', 'kirik', 'kitgo', 'kokke', 'kolte', 'koole', 'kothi', 'kotta', 'kudmi', 'kuiey', 'lodde', 'loosu', 'mabbu', 'macha', 'machi', 'magne', 'maama', 'maamu', 'maava', 'malli', 'manga',
                             'manne', 'maska', 'medam', 'minda', 'mollu', 'motte', 'nakra', 'nekku', 'othla', 'panta', 'pekra', 'peltu', 'pirki', 'porki', 'pungi', 'ragle', 'saaru', 'scope', 'suvar', 'tadku', 'tagdu', 'taklu', 'tigne', 'tikla', 'tiklu', 'tooku', 'tunne',
                             'udees', 'aandal', 'achchu', 'adjust', 'bachha', 'batthi', 'bejaan', 'bombat', 'bomman', 'burdey', 'chamak', 'chatri', 'chatta', 'chilre', 'chindi', 'chingi', 'chinki', 'chippu', 'chombu', 'chumma', 'cracku', 'dagaar', 'damaar', 'dingri', 'draabe',
                             'enamma', 'gaandu', 'gubaal', 'jakaas', 'kachgo', 'kajoor', 'kantri', 'karaab', 'kogile', 'kuroop', 'maanja', 'makkar', 'mangya', 'matash', 'meeter', 'mentlu', 'mindri', 'paakda', 'pantar', 'papplu', 'pigure', 'pinish', 'pyaade', 'sakkat', 'shaata',
                             'shanta', 'suthgo', 'syaata', 'thupuk', 'tholdu', 'thordu', 'thullu', 'udaisu', 'adklasi', 'ammanni', 'baandli', 'bevarsi', 'bindaas', 'chamcha', 'chameli', 'chamman', 'chappar', 'chootya', 'dabaisu', 'darbesi', 'dichchi', 'ethakko', 'gaampar', 'gamaara',
                             'guraisu', 'hanumya', 'jamaisu', 'kachchu', 'kalakar', 'kalchko', 'kharaab', 'lagaisu', 'machchu', 'muchchu', 'obiraya', 'pataisu', 'piklati', 'pulchar', 'randike', 'stepney', 'supaari', 'teertha', 'jaiannu', 'adumkoli', 'atkaisko', 'badetade', 'bendethu', 'bolimaga',
                             'chinaali', 'chinalke', 'hebbettu', 'jhinchak', 'mundaisu', 'naamarda', 'narpetla', 'nigrbeda', 'ninnajji', 'petromax', 'saamaanu', 'turemane', 'choobidu', 'naamaidu', 'tikamaka', 'baddimaga', 'chitranna', 'edbidangi', 'fountainu', 'gaanchali', 'hodskonda', 'kittogiro',
                             'ninnakkan', 'ninnamman', 'soolemaga', 'guldukhan', 'kambiensu', 'ladyrambo', 'namhudgru', 'sodabuddi', 'tikakobbu', 'dandapinda', 'khatarnaak'
                             'рд▓рдВрдб', 'рд▓реМрдбрд╛', 'рд▓рд╡рдбрд╛', 'рдЖрдВрдб', 'рдЧреЛрдЯреА', 'рдкреБрдЪреНрдЪреА', 'рднреЛрд╕рдбрд╛', 'рдЪреВрдд', 'рдлреЛрджрд░реА', 'рдлреЛрджреА', 'рднреЛрдХ', 'рдЧрд╛рдВрдб', 'рдмреЛрдЪрд╛','рдЭрд╡рдгреЗ','рдЪреЛрджрдгреЗ', 'рдШрд╛рд▓рдгреЗ', 'рдЯрд╛рдХрдгреЗ', 'рдореБрддрдгреЗ', 'рдЙрдардгреЗ', 'рд░рд╛рдВрдб', 'рд╡реЗрд╢реНрдпрд╛', 'рдЫрд┐рдирд╛рд▓', 'рдЧрд╛рдВрдбреВ', 'рдЪреБрддрд┐рдпрд╛','рдЪреБрддрд┐рдпреЗ','рдорд╛рджрд░рдЪреЛрдж','рднрд┐рдХрд╛рд░рдЪреЛрдЯ','рд░рд╛рдВрдбреЗрдЪреНрдпрд╛',
                             'achuda','bara','bhag', 'bhoda', 'chood', 'chudi', 'dhon', 'putki',
                             'babhuchak', 'bhadvo', 'bhopa', 'bobla', 'bosrina', 'buckwass', 'budhalal','chod', 'chodhru', 'chodkanya', 'chodu', 'chutiya', 'fattu', 'gando', 'ghelchoydi','hopa', 'kutari', 'loda', 'luli', 'namuno', 'puti', 'pikina', 'raand', 'sandas',
                             'banda', 'bedhei', 'biaa', 'bujula', 'chhodi', 'dana', 'kukura',
                             'kuti', 'haramjada', 'maachaud','bhander', 'lund', 'doodi', 'phudee', 'rami', 'budh', 'gaandu', 'rundi',
                             '╪п┘Д┘С', '╪н╪▒╪з┘Е█М', '┘Е╪з╪п╪▒ ┌Ж┘И╪п', '┌Ж┘И╪к█М╪з', '┘╛┘П┌╛╪п┘И', '┘Г╪к█М', '╪▒┘Ж┌И█М', '╪м┌╛┘Д┘С█Т', '╪м┌╛╪з┘И╪з┌║', 'harami', 'madarchod', 'zaleel', 'chutia', 'lora', 'phuddu', 'salaay', 'muthar','lanti', 'khinzir', 'nagora'
                        ]
    custom_profanitywordsset = set(custom_profanitywords)
    Sourcedata['comment_textDisplay'] = Sourcedata['comment_textDisplay'].apply(lambda text: ' '.join([word for word in text.split() if word not in custom_profanitywordsset]))
    return Sourcedata
################################################################################################
#Step19: Identify the English stop words and remove
def EnglishProfanityWordsRemover(ytcomments):

    CensoredComments = profanity.censor(ytcomments)
    TreatedComments = CensoredComments.replace('*', ' ')
    TreatedComments = ' '.join(TreatedComments.split())
    return TreatedComments
################################################################################################
#Step20: Identify the English stop words and remove
def YTCommentsStopWordsRemover(comments):

    nltk.download('stopwords')
    nltk.download('punkt')
    nltk.download('wordnet')
    Engstopwords = set(stopwords.words('english'))
    Tokenizedwords = word_tokenize(comments)
    filtered_words = [token1gram for token1gram in Tokenizedwords if token1gram.lower() not in Engstopwords]
    filtered_words = ' '.join(filtered_words)
    filtered_words = re.sub(r'\s+', ' ', filtered_words)
    return filtered_words
################################################################################################
#Step21: Identify the English stop words and remove
def IndicStopWordsRemover(Sourcedata):

    IndiclanguageDF = {}
    for Indiclang_code in Sourcedata['language_code'].unique():
        Indiclang_df = Sourcedata[Sourcedata['language_code'] == Indiclang_code].copy()
        IndiclanguageDF[Indiclang_code] = Indiclang_df

    # Step 2: Define custom words list based on language codes
    Indiccustom_words = {
        'hi': ['pakistan','pak', 'isi', 'рдФрд░','рдХреЗ','рдХрд╛','рдХреА','рдХреЛ','рд╣реИ','рдПрдХ','рдореЗрдВ','рд╕реЗ','рд╣реИрдВ','рдХрд░','рдкрд░','рд╣реЛ','рдЗрд╕','рдерд╛','рдХрд┐','рд▓рд┐рдП','рдпрд╛','рд╣реЛрддрд╛','рдХреБрдЫ','рдХрд░рдиреЗ','рд╡рд╛рд▓реЗ','рдХрд░рддреЗ','рд╣реБрдП','рдЙрдирдХреЗ','рдЙрдирдХрд╛','рдЙрдирдХреА','рдХрд░рддрд╛','рдЗрд╕рдХреЗ','рдЗрд╕рдХрд╛','рдЗрд╕рдХреА','рдЬреИрд╕реЗ','рдХреБрд▓','рдЕрдЧрд░','рд╣рдо','рд╣рдорд╛рд░реЗ','рдЖрдк','рдЖрдкрдХреЗ','рдЕрдкрдиреЗ','рдЕрдкрдирд╛','рдЕрдкрдиреА','рдЖрдЬ','рдХрд▓','рдХрднреА','рдЕрдм','рддрдм','рдЗрддрдирд╛','рдмрд╣реБрдд','рдХреНрдпреЛрдВрдХрд┐','рдХреНрдпрд╛','рдХрд┐рддрдирд╛','рдХреИрд╕реЗ','рдЬрдм','рддрдХ','рдЬрд┐рд╕рдХреЗ','рдЬрд┐рд╕рдХрд╛','рдЬрд┐рд╕рдХреА','рдЬрд┐рд╕рдХреЛ','рдЬреИрд╕рд╛','рдЬрд┐рдирдХрд╛','рдЬрд┐рдирдХреА','рдЬрд┐рдирдХреЛ','рдЬрд┐рдиреНрд╣реЛрдВрдиреЗ','рд╡рд░реНрдЧ','рд╕рдордп','рд╕рд╛рде','рдкреВрд░рд╛','рдлрд┐рд░','рдЙрд╕рдХрд╛','рдЙрд╕рдХреА','рдЙрд╕рдХреЗ','рдЙрдирдХреЛ','рдХрд┐рд╕реА','рд╡рд╣','рд╡рд╣реА','рд╡рд╣рд╛рдБ','рд╡рд╣рд╛рдВ','рд╡рд╛рд▓реА','рд╡рд╛рд▓рд╛','рд╡рд╛рд▓реЛрдВ','рд╡рд╛рд▓реАрдпреЛрдВ','рд╕реНрд╡рдпрдВ','aur','ke','ka','kee','ko','hai','ek','mein','se','hain','kar','par','ho','is','tha','ki','lie','ya','hota','kuchh','karane','vaale','karate','hue','unake','unaka','unakee','karata','isake','isaka','isakee','jaise','kul','agar','ham','hamaare','aap','aapake','apane','apana','apanee','aaj','kal','kabhee','ab','tab','itana','bahut','kyonki','kya','kitana','kaise','jab','tak','jisake','jisaka','jisakee','jisako','jaisa','jinaka','jinakee','jinako','jinhonne','varg','samay','saath','poora','phir','usaka','usakee','usake','unako','kisee','vah','vahee','vahaan','vaalee','vaala','vaalon','vaaleeyon','svayan'],
        'ta': ['роорпЗро▓рпБроорпН','роЕроирпНрод','роЗродрпБ','роЕродрпБ','роЗроирпНрод','роЕроирпНродроХрпН','роЖройро╛ро▓рпН','роЗродройрпН','роЕродройрпН','роОройрпНро▒рпБ','роЗрокрпНрокрпЛродрпБ','роЗрокрпНрокрпЛродро╛ройрпН','рокро┐ройрпНройро░рпН','рокро┐ройрпН','роЕродро┐ро▓рпН','роЗродро┐ро▓рпН','Melum','anta','itu','atu','inta','antak','itaс╣Й','ataс╣Й','eс╣Йс╣Яu','ippotu','ippotaс╣Й','piс╣Йс╣Йar'],
        'bn': ['ржЕрждржПржм','ржЕржержЪ','ржЕржержмрж╛','ржЕржирзБржпрж╛ржпрж╝рзА','ржЕржирзЗржХ','ржЕржирзЗржХрзЗ','ржЕржирзЗржХрзЗржЗ','ржЕржирзНрждржд','ржЕржмржзрж┐','ржЕржмрж╢рзНржп','ржЖржЧрж╛ржорзА','ржЖржЧрзЗ','ржЖржЧрзЗржЗ','ржЖржЫрзЗ','ржЖржЬ','ржЖржмрж╛рж░','ржЖржорж░рж╛','ржЖржорж╛ржжрзЗрж░','ржЖржорж╛рж░','ржЖржорж┐','ржЖрж░','ржЖрж░ржУ','ржЗ','ржЗрждрзНржпрж╛ржжрж┐','ржЙрждрзНрждрж░','ржЙржкрж░','ржЙржкрж░рзЗ','ржЙрждрзНрждрж░рзЗ','ржЙржирж┐','ржУ','ржУржЗ','ржУрж░','ржУрж░рж╛','ржУржжрзЗрж░','ржУрж╣','ржУрж╣рзЗ','ржХржЦржиржУ','ржХрж░рждрзЗ','ржХрж░ржмрзЗ','ржХрж░ржмрзЗржи','ржХрж░рж╛','ржХрж░рж╛ржЗ','ржХрж░рж╛ржпрж╝','ржХрж░рж┐','ржХрж░рж┐рждрзЗ','ржХрж░рж┐ржпрж╝рж╛','ржХрж░рзЗ','ржХрж░рзЗржЗ','ржХрж░рзЗржЫрж┐рж▓рзЗржи','ржХрж░рзЗржЫрзЗ','ржХрж░рзЗржЫрзЗржи','ржХрж░рзЗржи','ржХрж╛ржЙржХрзЗ','ржХрж╛ржЫ','ржХрж╛ржЫрзЗ','ржХрж╛ржЬ','ржХрж╛ржЬрзЗ','ржХрж╛рж░ржУ','ржХрж┐ржВржмрж╛','ржХрж┐ржЫрзБ','ржХрж┐ржЫрзБржЗ','ржХрж┐ржирзНрждрзБ','ржХрзА','ржХрзЗ','ржХрзЗржЙ','ржХрзЗржЦрж╛','ржХрзЗржи','ржХрзЛржЯрж┐','ржХрзЛржи','ржХрзЛржиржУ','ржХрзЛржирзЛ','ржХрзНрж╖рзЗрждрзНрж░рзЗ','ржЦрзБржм','ржЧрж┐ржпрж╝рзЗ','ржЧрж┐ржпрж╝рзЗржЫрзЗ','ржЧрж┐ржпрж╝рзЗржЫрзЗржи','ржЧрзБрж▓рж┐','ржЧрзЗржЫрзЗ','ржЧрзЗржЫрзЗржи','ржЧрзЛржЯрж╛','ржЪрзЗржпрж╝рзЗ','ржЫрж╛ржбрж╝рж╛','ржЫрж╛ржбрж╝рж╛ржУ','ржЫрж┐рж▓','ржЫрж┐рж▓рзЗржи','ржЬржи','ржЬржиржЧржг','ржЬржирзНржп','ржЬржирзНржпржУржЬрзЗ','ржЬрж╛ржирж╛','ржарж┐ржХ','рждржЦржи','рждржмрзБ','рждржмрзЗ','рждрж╛',
                        'рждрж╛ржЗ','рждрж╛ржУ','рждрж╛ржХрзЗ','рждрж╛рждрзЗ','рждрж╛ржжрзЗрж░','рждрж╛рж░','рждрж╛рж░ржкрж░','рждрж╛рж░рж╛','рждрж╛рж░рзИ','рждрж╛рж╣рж▓рзЗ','рждрж╛рж╣рж╛','рждрж╛рж╣рж╛рждрзЗ','рждрж╛рж╣рж╛рждрзЗржЗ','рждрж┐ржирж┐','рждрж┐ржирж┐ржУ','рждрзБржорж┐','рждрзБрж▓рзЗ','рждрзЗржоржи','рждрзЛ','рждрзЛржорж╛рж░','ржерж╛ржХржмрзЗ','ржерж╛ржХржмрзЗржи','ржерж╛ржХрж╛','ржерж╛ржХрж╛ржпрж╝','ржерж╛ржХрзЗ','ржерж╛ржХрзЗржи','ржерзЗржХрзЗ','ржерзЗржХрзЗржЗ','ржерзЗржХрзЗржУ','ржжрж┐ржХрзЗ','ржжрж┐рждрзЗ','ржжрж┐ржпрж╝рзЗ','ржжрж┐ржпрж╝рзЗржЫрзЗ','ржжрж┐ржпрж╝рзЗржЫрзЗржи','ржжрж┐рж▓рзЗржи','ржжрзБ','ржжрзБржЯрж┐','ржжрзБржЯрзЛ','ржжрзЗржУржпрж╝рж╛','ржжрзЗржУржпрж╝рж╛рж░','ржжрзЗржУржпрж╝рж╛ржпрж╝','ржжрзЗржЦрждрзЗ','ржжрзЗржЦрждрзЗржЗ','ржжрзЗржЦрж╛','ржжрзЗржЦрзЗ','ржжрзЗржи','ржжрзЗржпрж╝','ржжрзЗржпрж╝рж╛','ржжрзЗржпрж╝рж╛рж░','ржжрзЗржпрж╝рж╛ржпрж╝','ржжрзЗржпрж╝рзЗ','ржжрзНржмрж╛рж░рж╛','ржзрж░рж╛','ржзрж░рзЗ','ржирждрзБржи','ржиржпрж╝','ржирж╛','ржирж╛ржЗ','ржирж╛ржХрж┐','ржирж╛ржЧрж╛ржж','ржирж╛ржирж╛','ржирж┐ржЬрзЗ','ржирж┐ржЬрзЗржЗ','ржирж┐ржЬрзЗржжрзЗрж░','ржирж┐ржЬрзЗрж░','ржирж┐ржЬрзЗрж╕рзНрже','ржирж┐рж░рзНржжрж┐рж╖рзНржЯ','ржирзЗржУржпрж╝рж╛','ржирзЗржУржпрж╝рж╛рж░','ржирзЗржУржпрж╝рж╛ржпрж╝','ржирзЯ','ржкржХрзНрж╖рзЗ','ржкрж░','ржкрж░рзЗ','ржкрж░рзЗржЗ','ржкрж░рзНржпржирзНржд','ржкрж╛ржУржпрж╝рж╛','ржкрж╛рж░рзЗ','ржкрж┐','ржкрзЗржпрж╝рзЗ','ржкрзЗрзЧржБржЫрзЗ','ржкрзНрж░рждрж┐','ржкрзНрж░ржержо','ржкрзНрж░ржнрзГрждрж┐','ржкрзНрж░рж╛ржержорж┐ржХ','ржкрзНрж░рж╛ржпрж╝','ржкрзНрж░ржпржирзНржд','ржкрзНрж░рж╛ржпрж╝рзЛржЬржи','ржкрзНрж░рж╛ржпрж╝рзЛржЬржирзЗ','ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝','ржкрзНрж░рж╛ржпрж╝рзЛржЬржирзАржпрж╝рждрж╛','ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ржнрж╛ржмрзЗ','ржкрзНрж░рж╛ржпрж╝рзЛржЬржирзАржпрж╝ржоржд','ржкрзНрж░рж╛ржпрж╝рзЛржЬржирзАржпрж╝рз╖','ржлрж▓рзЗ','ржлрж┐рж░рзЗ','ржлрзЗрж░','ржмржХрзНрждржмрзНржп','ржмржжрж▓рзЗ',
                        'ржмржи','ржмрж░ржВ','ржмрж▓рждрзЗ','ржмрж▓рждрзЗржЗ','ржмрж▓рж╛','ржмрж▓рзЗ','ржмрж▓рзЗржЗ','ржмрж╕рзЗ','ржмрж╣рзБ','ржмрж╛','ржмрж╛ржжрзЗ','ржмрж╛рж░','ржмрж┐ржПржо','ржмрж┐рж╢рзЗрж╖','ржмрж┐рж╖ржпрж╝ржЯрж┐','ржмрзЗрж╢','ржмрзЗрж╢рж┐','ржмрзНржпржмрж╣рж╛рж░','ржмрзНржпрж╛ржкрж╛рж░рзЗ','ржнрж╛ржмрзЗ','ржорждрзЛ','ржорждрзЛржЗ','ржоржзрзНржпржнрж╛ржЧрзЗ','ржоржзрзНржпрзЗ','ржоржзрзНржпрзЗржЗ','ржоржзрзНржпрзЗржУ','ржоржирзЗ','ржорж╛ржзрзНржпржорзЗ','ржорж╛рждрзНрж░','ржорзЛржЯ','ржорзЛржЯрзЗржЗ','ржпржЦржи','ржпржд','ржпрждржЯрзБржХрзБ','ржпрждрзЗрж╣рзЗ','ржпрж╛','ржпрж╛ржБрж░','ржпрж╛ржБрж░рж╛','ржпрж╛ржУржпрж╝рж╛','ржпрж╛ржУржпрж╝рж╛рж░','ржпрж╛ржУржпрж╝рж╛ржпрж╝','ржпрж╛рзЯ','ржпрж╛ржХрзЗ','ржпрж╛рждрзЗ','ржпрж╛ржжрзЗрж░','ржпрж╛ржи','ржпрж╛ржмрзЗ','ржпрж╛ржпрж╝','ржпрж╛рж░','ржпрж╛рж░рж╛','ржпрзЗ','ржпрзЗржЦрж╛ржирзЗ','ржпрзЗрждрзЗ','ржпрзЗржи','ржпрзЗржоржи','рж░','рж░ржХржо','рж░ржпрж╝рзЗржЫрзЗ','рж░рж╛ржЦрж╛','рж░рзЗржЦрзЗ','рж╢рзБржзрзБ','рж╢рзБрж░рзБ','рж╕ржЩрзНржЧрзЗ','рж╕ржЩрзНржЧрзЗржУ','рж╕ржорж╕рзНржд','рж╕ржоржпрж╝','рж╕ржм','рж╕ржмрж╛рж░','рж╕рж╣','рж╕рж╣рж┐ржд','рж╕рж╛ржзрж╛рж░ржг','рж╕рж╛ржерзЗ','рж╕рзБрждрж░рж╛ржВ','рж╕рзЗ','рж╕рзЗржЗ','рж╕рзЗржЦрж╛ржи','рж╕рзЗржЦрж╛ржирзЗ','рж╕рзЗржЯрж╛','рж╕рзЗржЯрж┐','рж╕рзЗржЯрж┐ржЗ','рж╕рзЗржЯрж┐ржУ','рж╕рзЗржЯрж┐ржУржУ','рж╕рзЗржЯрж┐ржХрзЗ'],
        'te': ['р░Ер░Вр░жр▒Б','р░Ер░Вр░жр▒Бр░Хр▒Б','р░Ер░Вр░жр▒Бр░и','р░Ер░Вр░жр▒Бр░▓р▒Л','р░Ер░Вр░жр▒Бр░▓р▒Лр░ир░┐','р░Ер░Вр░д','р░Ер░Вр░др░Хр░Вр░Яр▒З','р░Ер░Вр░др░Хр▒Б','р░Ер░Вр░др░▓р▒Л','р░Ер░Вр░др░▓р▒Лр░ир░┐','р░Ер░ир░Вр░др░░','р░Ер░ир░┐','р░Ер░ир░┐р░кр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐','р░Ер░ир▒Б','р░Ер░ир▒Бр░Хр▒Бр░Вр░Яр▒Бр░Вр░жр░┐','р░Ер░ир▒Бр░Хр▒Бр░Вр░Яр▒В','р░Ер░ир▒Бр░ор░╛р░ир░В','р░Ер░ир▒Бр░ор░╛р░ир░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐','р░Ер░ир▒Бр░ор░╛р░ир░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░░р▒Б','р░Ер░ир▒Бр░ор░╛р░ир░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░пр░┐','р░Ер░ир▒Бр░ор░╛р░ир░┐р░╕р▒Нр░др▒В','р░Ер░ир▒Нр░и','р░Ер░ир▒Нр░ир░┐','р░Ер░кр▒Нр░кр▒Бр░бр▒Б','р░Ер░кр▒Нр░кр▒Бр░бр▒З','р░Ер░пр░┐р░др▒З','р░Ер░▓р░╛','р░Ер░▓р░╛р░Чр▒З','р░Ер░Вр░жр▒Б'],
        'mr': ['рдЕрдзрд┐рдХ', 'рдЕрдиреЗрдХ', 'рдЕрд╢реА', 'рдЕрд╕рд▓рдпрд╛рдЪреЗ', 'рдЕрд╕рд▓реЗрд▓реНрдпрд╛', 'рдЕрд╕рд╛', 'рдЕрд╕реВрди', 'рдЕрд╕реЗ', 'рдЖрдЬ', 'рдЖрдгрд┐', 'рдЖрддрд╛', 'рдЖрдкрд▓реНрдпрд╛', 'рдЖрд▓рд╛', 'рдЖрд▓реА', 'рдЖрд▓реЗ', 'рдЖрд╣реЗ', 'рдЖрд╣реЗрдд', 'рдПрдХ', 'рдПрдХрд╛', 'рдХрдореА', 'рдХрд░рдгрдпрд╛рдд', 'рдХрд░реВрди', 'рдХрд╛', 'рдХрд╛рдо', 'рдХрд╛рдп', 'рдХрд╛рд╣реА', 'рдХрд┐рд╡рд╛', 'рдХреА', 'рдХреЗрд▓рд╛', 'рдХреЗрд▓реА', 'рдХреЗрд▓реЗ', 'рдХреЛрдЯреА', 'рдЧреЗрд▓реНрдпрд╛', 'рдШреЗрдКрди', 'рдЬрд╛рдд', 'рдЭрд╛рд▓рд╛', 'рдЭрд╛рд▓реА', 'рдЭрд╛рд▓реЗ', 'рдЭрд╛рд▓реЗрд▓реНрдпрд╛', 'рдЯрд╛', 'рдбреЙ', 'рддрд░', 'рддрд░реА', 'рддрд╕реЗрдЪ', 'рддрд╛', 'рддреА', 'рддреАрди', 'рддреЗ', 'рддреЛ', 'рддреНрдпрд╛', 'рддреНрдпрд╛рдЪрд╛', 'рддреНрдпрд╛рдЪреА', 'рддреНрдпрд╛рдЪреНрдпрд╛', 'рддреНрдпрд╛рдирд╛', 'рддреНрдпрд╛рдиреА', 'рддреНрдпрд╛рдореБрд│реЗ', 'рддреНрд░реА', 'рджрд┐рд▓реА', 'рджреЛрди', 'рди', 'рдирд╛рд╣реА', 'рдирд┐рд░реНрдгреНрдп', 'рдкрдг', 'рдкрдо', 'рдкрд░рдпрддрди', 'рдкрд╛рдЯреАрд▓', 'рдо', 'рдорд╛рддреНрд░', 'рдорд╛рд╣рд┐рддреА', 'рдореА', 'рдореБрдмреА', 'рдореНрд╣рдгрдЬреЗ', 'рдореНрд╣рдгрд╛рд▓реЗ', 'рдореНрд╣рдгреВрди', 'рдпрд╛', 'рдпрд╛рдЪрд╛', 'рдпрд╛рдЪреА', 'рдпрд╛рдЪреНрдпрд╛', 'рдпрд╛рдирд╛', 'рдпрд╛рдиреА', 'рдпреЗрдгрд╛рд░', 'рдпреЗрдд', 'рдпреЗрдереАрд▓', 'рдпреЗрдереЗ', 'рд▓рд╛рдЦ', 'рд╡', 'рд╡реНрдпрдХрдд', 'рд╕рд░реНрд╡', 'рд╕рд╛рдЧрд┐рддреНрд▓реЗ', 'рд╕реБрд░реВ', 'рд╣рдЬрд╛рд░', 'рд╣рд╛', 'рд╣реА', 'рд╣реЗ', 'рд╣реЛрдгрд╛рд░', 'рд╣реЛрдд', 'рд╣реЛрддрд╛', 'рд╣реЛрддреА', 'рд╣реЛрддреЗ'],
        'gu': ['ркЕркВркд', 'ркЕркирлЗ', 'ркЕркмркЬ', 'ркЕркорлЗ', 'ркЕрк░рлЗ', 'ркЕрк▓ркЧ', 'ркЕрк╕рк░', 'ркЖркЧрк│', 'ркЖркЬрлЗ', 'ркЖрккрлЗ', 'ркЖрккрлЛ', 'ркЖрк╡рк╛', 'ркЖрк╡рлЗ', 'ркЖрк╡рлЛ', 'ркЗркбрлА', 'ркЙрккрк░', 'ркПркЖрк░', 'ркПркПркл', 'ркПркУркУ', 'ркПркорки', 'ркУркЫрк╛', 'ркХркВркИ', 'ркХркжрк░', 'ркХркорки', 'ркХркпрлБ', 'ркХрк░рлА', 'ркХрк░рлЗ', 'ркХрк░рлЛ', 'ркХрк╣рлЗ', 'ркХрк╣рлЛ', 'ркХрк╛рко', 'ркХрлАркУ', 'ркХрлБрк▓', 'ркХрлЗрки', 'ркХрлЗрко', 'ркХрлЗрк╕', 'ркХрлЛркИ', 'ркХрлЛркг', 'ркХрлЛрки', 'ркХрлЛрко', 'ркЦрк╛ркг', 'ркЦрк╛рк╕', 'ркЦрлВркм', 'ркЧркорлЗ', 'ркЧркпрк╛', 'ркЧркпрлЛ', 'ркЧрлЛрк│', 'ркШркгрк╛', 'ркШркгрлА', 'ркЪрк╛рк░', 'ркЪрк╛рк▓', 'ркЫрлБркВ', 'ркЬркорк╛', 'ркЬрк╛ркУ', 'ркЬрк╛ркп', 'ркЬрлАркЗ', 'ркЬрлАрки', 'ркЬрлАрк╕', 'ркЬрлБркП', 'ркЬрлБркУ', 'ркЬрлВрке', 'ркЬрлЗрко', 'ркЬрлЛркИ', 'ркЯрлАркк', 'ркЯрлЗрк╡', 'ркЯрлЛркЪ', 'ркарлАркХ', 'ркбрлЛрки', 'ркдркорлЗ', 'ркдрк░ркд', 'ркдрк░ркл', 'ркдрлБркВ', 'ркдрлЗркУ', 'ркдрлЗрко', 'ркдрлЗрк░', 'ркерк╛ркп', 'ркжрлВрк░', 'ркзрлВрки', 'ркиркХрк▓', 'ркиркерлА', 'ркирк░ркХ', 'ркирк╡рлА', 'ркирк╛рко', 'рккркЫрлА', 'рккрлАркИ', 'рккрлАрка', 'рклрк░рлА', 'рклрк╛ркИ', 'рклрк┐ркл', 'ркмркВркз', 'ркмркзрк╛', 'ркмркирлА', 'ркмркирлЗ', 'ркмрк╛рк░', 'ркмрк┐рки', 'ркмрк┐рк▓', 'ркмрлЗркЙ', 'ркнрк░рлЛ', 'ркнрк╛ркЧ', 'ркнрлЗркЯ', 'ркоркжркж',
                        'ркоркирлЗ', 'ркорклркд', 'ркорк│рлА', 'ркорк│рлЗ', 'ркорк╛ркВ', 'ркорк╛ркл', 'ркорк╛рк▓', 'ркорк┐рк▓', 'ркорлАрки', 'ркпрлАрк╣', 'рк░ркХрко', 'рк░рк╣рлА', 'рк░рлЗркл', 'рк▓рк╛рк▓', 'рк╡ркЧрк░', 'рк╡ркзрлБ', 'рк╡рк▓ркг', 'рк╡рк╣рлБ', 'рк╡рк│рлЗ', 'рк╡рк│рлЛ', 'рк╡рлАрк╕', 'рк╡рлЗркм', 'рк╢рк░рлВ', 'рк╢рлБркВ', 'рк╢рлЗркб', 'рк╢рлЗрк▓', 'рк╢рлЛркз', 'рк╕ркжрк╛', 'рк╕рк╛ркЧ', 'рк╕рк╛рка', 'рк╕рк╛ркд', 'рк╕рлНрк╡', 'рк╣ркЬрлБ', 'рк╣ркдрк╛', 'рк╣ркдрлА', 'рк╣рк╡рлЗ', 'рк╣рк╢рлЗ', 'рк╣рк╛ркп', 'рк╣рлБркВ', 'рк╣рлБркИ', 'рк╣рлЗркб', 'рк╣рлЛркИ', 'рк╣рлЛркд', 'ркдрлЗркерлА', 'ркЕркВркжрк░', 'ркЕркЧрк╛ркЙ', 'ркЕркбркзрк╛', 'ркЕркерк╡рк╛', 'ркЕркирлНркп', 'ркЕркоркирлЗ', 'ркЕрк░рлНрке', 'ркЕрк╡рк╕рк╛', 'ркЕрк╣рлАркВ', 'ркЖркИркбрлА', 'ркЖрккркгрлЛ', 'ркЖрккрлЗрк▓', 'ркЖркнрк╛рк░', 'ркЙркЪрлНркЪ', 'ркПркВрк╕рлА', 'ркПркХркжрко', 'ркПркХрк▓рк╛', 'ркПркЯрк▓рлЗ', 'ркПркирк╕рлА', 'ркПрклркПркл', 'ркПркоркХрлЗ', 'ркПркорккрлА', 'ркПркорк╡рлА', 'ркПркорк╕рлА', 'ркПрк▓рк╡рлА', 'ркУркЫрлБркВ', 'ркУрк░ркбрлЛ', 'ркХркВркИркХ', 'ркХркжрк╛ркЪ', 'ркХрк░рк╢рлЗ', 'ркХрк▓рк╛ркХ', 'ркХрк╛ркпрко', 'ркХрк╛рк░ркг', 'ркХрлГрккрк╛', 'ркХрлЗрк╡рлА', 'ркХрлЛркИркХ', 'ркХрлЛрк░рлЗ', 'ркЦрк╛рк▓рлА', 'ркЦрлБрк▓рлЗ', 'ркЧрк░рлНрк╡', 'ркШркгрлБркВ', 'ркЪрк╛рк▓рлБ', 'ркЪрк╛рк▓рлЛ', 'ркЪрлВркХрлА', 'ркЫркдрк╛ркВ', 'ркЬрк░рлВрк░', 'ркЬрк╡рлБркВ', 'ркЬрк╛ркбрк╛', 'ркЬрк╛ркгрлЗ', 'ркЬрк╛ркгрлЛ', 'ркЬрк╛ркдрлЗ', 'ркЬрлАркЖркИ', 'ркЬрлАрк╡рлЛ', 'ркЬрлВркерлЛ',
                        'ркЬрлВркирлА', 'ркЬрлЛркИркП', 'ркЬрлЛркХрлЗ', 'ркЯрлАркЯрлА', 'ркЯрлАркбрлА', 'ркЯрлАрккрлА', 'ркЯрлАрк╡рлА', 'ркЯрлАрк╕рлА', 'ркЯрлЗркХрлЛ', 'ркЯрлНрк╡рк┐', 'ркбрк╛ркЙрки', 'ркдрлЗркгрлА', 'ркдрлЗркирк╛', 'ркдрлЗркирлЗ', 'ркдрлЗрк╡рлА', 'ркдрлНрк░ркг', 'ркерлЛркбрк╛', 'ркерлНрк░рлБ', 'ркжрк░рлЗркХ', 'ркжрлНрк╡рк┐', 'ркиркВркмрк░', 'ркиркЬрлАркХ', 'ркиркмрк│рлА', 'ркирк╡рлБркВ', 'ркирк╣рлАркВ', 'ркирк╛ркирк╛', 'ркирлАркЪрк╛', 'ркирлАркЪрлЗ', 'ркирлБркХрлЗ', 'рккркВркжрк░', 'рккркЪрк╛рк╕', 'рккркЫрк╛ркд', 'рккрк╛ркВркЪ', 'рккрк╛ркЫрк│', 'рккрк╛ркЫрк╛', 'рккрк┐ркдрлГ', 'рккрлАркЖрк░', 'рккрлАркЯрлА', 'рккрлАрккрлА', 'рккрлВркЫрлЗ', 'рккрлВрк░рлА', 'рккрлЗркЯрк╛', 'рккрлЛркХрк│', 'рккрлЛркдрлЗ', 'ркмркВркирлЗ', 'ркмркжрк▓рлЗ', 'ркмркзрлБркВ', 'ркмрк╣рк╛рк░', 'ркмрк╛ркЬрлБ', 'ркмрк╛рк▓рк╛', 'ркмрлАркЖрк░', 'ркмрлАркЬрлЗ', 'ркмрлАркЬрлЛ', 'ркмрлАркЯрлА', 'ркмрлАркбрлА', 'ркмрлАркмрлА', 'ркмрлАрк╡рлА', 'ркнрк╛ркЧрлЛ', 'ркорк╣рк╛рки', 'ркорк╛ркЯрлЗ', 'ркорк╛ркгрк╕', 'ркорк╛ркирлЗ', 'ркорк╛рк░рк╛', 'ркорк╛рк░рлА', 'ркорк┐рк▓рлА', 'ркорлАркорлА', 'ркорлВркХрлЗ', 'ркорлВркХрлЛ', 'ркорлЛркЯрк╛', 'ркорлЛркЯрлЗ', 'ркорлНркпрлБ', 'рк░рк╛ркЦрлЗ', 'рк░рк┐ркВркЧ', 'рк░рлБркжрки', 'рк░рлВркЪрк┐', 'рк▓ркЧркнркЧ', 'рк▓ркЧрлНрки', 'рк▓рк╛ркЗрки', 'рк▓рк╛ркЧрлЗ', 'рк▓рлАркзрлЛ', 'рк▓рлЗркдрк╛', 'рк╡рк░рлНркЧ', 'рк╡рк░рлНрк╖', 'рк╡рк┐рк╢рлЗ', 'рк╡рлАркЬрлА', 'рк╡рлАрк╕рлА', 'рк╢ркХрлНркп', 'рк╢ркирлНркЯ', 'рк╢рк╛ркВркд', 'рк╢рлЛркзрлЗ', 'рк╢рлЛркзрлЛ', 'рк╢рлНрк░рлА', 'рк╕ркнрлНркп', 'рк╕ркоркЬрлБ', 'рк╕ркорк╛рки', 'рк╕рк╣рлЗркЬ', 'рк╕рк╛ркЗркЯ', 'рк╕рк╛ркерлЗ'],
        'ml': ['р┤Ер┤др┤┐р┤ир┤╛р╡╜','р┤Ер┤╡','р┤Ер┤╡р┤░р╡Бр┤Яр╡Ж','р┤Ер┤╡р┤░р╡Ж','р┤Ер┤╡р┤░р╡Жр┤ир╡Нр┤и','р┤Ер┤╡р┤░р╡Н','р┤Ер┤╡р┤░р╡Нр┤Хр╡Нр┤Хр╡Н','р┤Ер┤╡р┤░р╡Зр┤╛р┤Яр╡Н'],
        'kn': ['р▓И','р▓Жр▓жр▓░р│Ж','р▓Ор▓Вр▓жр│Б','р▓Ер▓╡р▓░','р▓ор▓др│Нр▓др│Б','р▓Ор▓Вр▓м','р▓Ер▓╡р▓░р│Б','р▓Тр▓Вр▓жр│Б','р▓мр▓Чр│Нр▓Чр│Ж','р▓Ж','р▓Зр▓жр│Ж','р▓Зр▓жр│Б','р▓ир▓╛р▓ир│Б','р▓ор│Вр▓▓р▓Х','р▓ир▓ир│Нр▓и','р▓Ер▓жр│Б','р▓ор│Зр▓▓р│Ж','р▓Ир▓Ч','р▓╣р▓╛р▓Чр│В','р▓Зр▓▓р│Нр▓▓','р▓ор│Кр▓жр▓▓','р▓ир▓ир▓Чр│Ж','р▓╣р│Жр▓Ър│Нр▓Ър│Б','р▓Ер▓╡р▓░р▓┐р▓Чр│Ж','р▓др▓ор│Нр▓о','р▓ор▓╛р▓бр▓┐','р▓ир▓ор│Нр▓о','р▓ор▓╛р▓др│Нр▓░','р▓жр│Жр│Вр▓бр│Нр▓б','р▓Ер▓жр│З','р▓Хр│Вр▓б','р▓╕р▓┐р▓ир▓┐р▓ор▓╛','р▓пр▓╛р▓╡р│Бр▓жр│З','р▓пр▓╛р▓╡','р▓Жр▓Ч','р▓др│Бр▓Вр▓мр▓╛','р▓ир▓╛р▓╡р│Б','р▓жр▓┐р▓и','р▓мр│Зр▓░р│Ж','р▓Ер▓╡р▓░р▓ир│Нр▓ир│Б','р▓Ор▓▓р│Нр▓▓р▓╛','р▓ир│Ар▓╡р│Б','р▓╕р▓╛р▓Хр▓╖р│Нр▓Яр│Б','р▓Хр▓ир│Нр▓ир▓б','р▓╣р│Кр▓╕','р▓ор│Бр▓Вр▓жр│Ж','р▓╣р│Зр▓Чр│Ж','р▓ир▓Вр▓др▓░','р▓Зр▓▓р│Нр▓▓р▓┐','р▓Хр│Жр▓▓р▓╕','р▓Ер▓▓р│Нр▓▓','р▓мр▓│р▓┐р▓Х','р▓Тр▓│р│Нр▓│р│Жр▓п','р▓╣р▓╛р▓Чр▓╛р▓Чр▓┐','р▓Тр▓Вр▓жр│З','р▓Ьр▓и','р▓Ер▓жр▓ир│Нр▓ир│Б','р▓мр▓Вр▓ж','р▓Хр▓╛р▓░р▓г','р▓Ер▓╡р▓Хр▓╛р▓╢','р▓╡р▓░р│Нр▓╖','р▓ир▓┐р▓ор│Нр▓о','р▓Зр▓др│Нр▓др│Б','р▓Ър▓┐р▓др│Нр▓░','р▓╣р│Зр▓│р▓┐','р▓ор▓╛р▓бр▓┐р▓ж','р▓Ер▓жр▓Хр│Нр▓Хр│Ж','р▓Жр▓Чр▓┐','р▓Ор▓Вр▓мр│Бр▓жр│Б','р▓Ер▓Вр▓д','р▓Хр│Жр▓▓р▓╡р│Б','р▓ор│Кр▓жр▓▓р│Б','р▓мр▓Вр▓жр│Б','р▓Зр▓жр│З','р▓ир│Лр▓бр▓┐','р▓Хр│Зр▓╡р▓▓','р▓Ор▓░р▓бр│Б','р▓Зр▓ир│Нр▓ир│Б','р▓Ер▓╖р│Нр▓Яр│З','р▓Ор▓╖р│Нр▓Яр│Б','р▓Ър▓┐р▓др│Нр▓░р▓ж','р▓ор▓╛р▓бр▓мр│Зр▓Хр│Б','р▓╣р│Ар▓Чр│Ж','р▓Хр│Бр▓░р▓┐р▓др│Б','р▓Йр▓др│Нр▓др▓░','р▓Ор▓Вр▓жр▓░р│Ж','р▓Зр▓ир│Нр▓ир│В','р▓ор▓др│Нр▓др│Ж','р▓Пр▓ир│Б','р▓кр▓╛р▓др│Нр▓░','р▓ор│Бр▓Вр▓жр▓┐р▓и','р▓╕р▓Вр▓жр▓░р│Нр▓нр▓жр▓▓р│Нр▓▓р▓┐', 'р▓ор▓╛р▓бр│Бр▓╡','р▓╡р│Зр▓│р│Ж','р▓ир▓ир│Нр▓ир▓ир│Нр▓ир│Б','р▓ор│Вр▓░р│Б','р▓Ер▓ер▓╡р▓╛','р▓Ьр│Жр│Вр▓др│Жр▓Чр│Ж','р▓╣р│Жр▓╕р▓░р│Б','р▓Ър▓┐р▓др│Нр▓░р▓жр▓▓р│Нр▓▓р▓┐'],
        'pa': ['риЗри╣','риЙри╕','риЗрй▒риХ','ри╣рйИ','риХри╛','риХрйА','риХрйЛ','риЕридрйЗ','риирйЗ','риХрйАридри╛','ри╣рйЛриЗриЖ','ри╕рйА','ри╕рйА','риери╛','риерйА','ри╕рй░риЧ','риЙри╕риирйЗ','риЗри╕рижрйЗ','риЙриирижрйЗ','ри╕рин','риХрйБриЭ','риХри┐ри╕рйЗ','риХри┐рй▒риерйЛриВ','риХри┐ри╡рйЗриВ','риХри┐риЙриВ','риХрйЛриИ','риЗри╣риири╛риВ','ih','us','ik','hai','ka','ki','ko','ate','ne','kita','hoiya','si','si','tha','thi','sang','usne','isde','unde','sabh','kujh','kise','kithon','kiven','kiun','koi','ihnan'],
        'ur': ['╪в╪ж█М','╪в╪ж█Т','╪в╪м','╪в╪о╪▒','╪в╪о╪▒┌й╪и╪▒','╪в╪п┘З█М','╪в┘Л╪и','╪в┘╣┌╛','╪в█М╪и','╪з╪й','╪з╪о╪и╪▓╪к','╪з╪о╪к╪к╪и┘Е','╪з╪п┌╛╪▒','╪з╪▒╪п','╪з╪▒╪п┌п╪▒╪п','╪з╪▒┌й╪и┘Й','╪з╪┤','╪з╪╢╪к╪╣┘И╪и┘Д','╪з╪╢╪к╪╣┘И╪и┘Д╪з╪к','╪з╪╢╪╖╪▒╪░','╪з╪╢┌й╪и','╪з╪╢┌й█М','╪з╪╢┌й█Т','╪з╪╖╪▒╪з┘Б','╪з╪║█М╪и','╪з┘Б╪▒╪з╪п','╪з┘Д┌п','╪з┘И╪▒','╪з┘И┘Л┌Ж╪и','╪з┘И┘Л┌Ж╪и╪ж█М','╪з┘И┘Л┌Ж█М','╪з┘И┘Л┌Ж█Т','╪з┘Й','╪з┘Л','╪з┘Л╪░╪▒','╪з┘Л█Б█М┌║','╪з┘╣┌╛╪и┘Л╪и','╪з┘╛┘М╪и','╪з┘╛┘М█Т','╪з┌Ж┌╛╪и','╪з┌Ж┌╛█М','╪з┌Ж┌╛█Т','╪з┌й╪л╪▒','╪з┌й┘╣┌╛╪и','╪з┌й┘╣┌╛█М','╪з┌й┘╣┌╛█Т','╪з┌й█М┘Д╪з','╪з┌й█М┘Д█М','╪з┌й█М┘Д█Т','╪з┌п╪▒┌Ж█Б','╪з█Б┘Ж','╪з█М╪╖█Т','╪з█М┌й','╪и','╪к','╪к╪и╪▓┘Н','╪к╪к','╪к╪▒','╪к╪▒╪к█М╪к','╪к╪▒█М┘К','╪к╪╣╪░╪з╪п','╪к┘Ж','╪к┘И','╪к┘И╪и┘Е','╪к┘И█Б█М','╪к┘И█Б█М┌║','╪к┘М█Б╪и','╪к┌й','╪к┌╛╪и','╪к┌╛┘И┌С╪з','╪к┌╛┘И┌С█М','╪к┌╛┘И┌С█Т','╪к┌╛█М','╪к┌╛█Т','╪к█М┘К','╪л╪и','╪л╪и╪ж█М┌║','╪л╪и╪к╪▒╪к█М╪к','╪л╪и╪▒█М','╪л╪и╪▒█Т','╪л╪и╪╣╪л','╪л╪и┘Д╪з','╪л╪и┘Д╪к╪▒╪к█М╪к','╪л╪и█Б╪▒','╪л╪п╪и╪ж█Т','╪л╪▒╪в┌║','╪л╪▒╪┤','╪л╪╣╪░','╪л╪║█М╪▒','╪л┘Д┘М╪░','╪л┘Д┘М╪░┘И╪л╪и┘Д╪з','╪л┘Д┌й█Б','╪л┘К','╪л┘М╪и','╪л┘М╪и╪▒█Б╪и','╪л┘М╪и╪▒█Б█М','╪л┘М╪и╪▒█Б█Т','╪л┘М╪и┘Л╪и','╪л┘М╪░','╪л┘М╪░┌й╪▒┘И','╪л┘М╪░┌й╪▒┘Л╪и'
                        ,'╪л┘М╪░█М','╪л┌С╪з','╪л┌С┘И┌║','╪л┌С█М','╪л┌С█Т','╪л┌╛╪▒','╪л┌╛╪▒╪з','╪л┌╛╪▒╪з█Б┘И╪з','╪л┌╛╪▒┘╛┘И╪▒','╪л┌╛█М','╪л█Б╪к','╪л█Б╪к╪▒','╪л█Б╪к╪▒█М','╪л█Б╪к╪▒█М┘К','╪л█М┌Ж','╪м','╪о╪и','╪о╪и╪▒█Б╪и','╪о╪и╪▒█Б█М','╪о╪и╪▒█Б█Т','╪о╪и┘З┘И╪╕','╪о╪и┘Л╪и','╪о╪и┘Л╪к╪и','╪о╪и┘Л╪к█М','╪о╪и┘Л╪к█Т','╪о╪и┘Л┘М╪и','╪о╪к','╪о╪к┘Ж','╪о╪м┌й█Б','╪о╪╡','╪о╪╖╪╖╪▒╪░','╪о┘Д╪░█М','╪о┘И','╪о┘И╪з┘Й','╪о┘И┘Л█Б█М','╪о┘И┌й█Б','╪о┘М╪и╪й','╪о┌п█Б','╪о┌п█Б┘И┌║','╪о┌п█Б█М┌║','╪о█М╪╖╪и','╪о█М╪╖╪и┌й█Б','╪п╪▒','╪п╪▒╪о╪и╪к','╪п╪▒╪о█Б','╪п╪▒╪о█Т','╪п╪▒╪▓┘В█М┘В╪к','╪п╪▒╪╢╪к','╪п╪┤','╪п┘Б╪╣█Б','╪п┘Д┌Ж╪╖┘╛','╪п┘Д┌Ж╪╖┘╛█М','╪п┘Д┌Ж╪╖┘╛█М╪и┌║','╪п┘И','╪п┘И╪▒','╪п┘И╪▒╪з┘Й','╪п┘И╪╢╪▒╪з','╪п┘И╪╢╪▒┘И┌║','╪п┘И╪╢╪▒█М','╪п┘И╪╢╪▒█Т','╪п┘И┘Л┘И┌║','╪п┌й┌╛╪и╪ж█М┌║','╪п┌й┌╛╪и╪к╪и','╪п┌й┌╛╪и╪к█М','╪п┌й┌╛╪и╪к█Т','╪п┌й┌╛╪и┘И','╪п┌й┌╛╪и┘Л╪и','╪п┌й┌╛╪и█М╪и','╪п█М','╪п█М╪и','╪п█М╪к╪и','╪п█М╪к█М','╪п█М╪к█Т','╪п█М╪▒','╪п█М┘М╪и','╪п█М┌й┌╛┘И','╪п█М┌й┌╛┘М╪и','╪п█М┌й┌╛█М','╪п█М┌й┌╛█М┌║','╪п█Т','╪▒','╪▒╪з╪╢╪к┘И┌║','╪▒╪з╪╢╪к█Б','╪▒╪з╪╢╪к█Т','╪▒╪▒█М╪╣█Б','╪▒╪▒█М╪╣█Т','╪▒┌й┘К','╪▒┌й┌╛','╪▒┌й┌╛╪и','╪▒┌й┌╛╪к╪и','╪▒┌й┌╛╪к╪и█Б┘И┌║','╪▒┌й┌╛╪к█М','╪▒┌й┌╛╪к█Т','╪▒┌й┌╛█М','╪▒┌й┌╛█Т','╪▒█Б╪и','╪▒█Б█М','╪▒█Б█Т','╪▓','╪▓╪и╪╡┘Д']
    }

    # Step 3: Remove words present in each dataframe
    for Indiclang_code, Indiclang_df in IndiclanguageDF.items():
        if Indiclang_code in Indiccustom_words:
            words_to_remove = Indiccustom_words[Indiclang_code]
            for word in words_to_remove:
                Indiclang_df['comment_textDisplay'] = Indiclang_df['comment_textDisplay'].str.replace(word, '')

        # Step 4: Remove multiple consecutive blank spaces
        Indiclang_df['comment_textDisplay'] = Indiclang_df['comment_textDisplay'].apply(lambda x: re.sub(r'\s+', ' ', x.strip()))

    # Print languages being processed
    for Indiclang_code in IndiclanguageDF.keys():
        print(f"Processing Youtube comments in {Indiclang_code} language.")

    # Step 5: Append dataframes and return the result
    combinedDF = pd.concat(IndiclanguageDF.values(), ignore_index=True)

    return combinedDF
################################################################################################
#Step22: Yoytube comments data collected is doesnt have sentiment label or score in it.
#To find the sentiment of the comments, we are using unsupervised approach using mBERT multilingual pretrained base model which consider uncased/not case sensitive
#If the source data already had these labels, we could move on to model build and prediction directly
def Compute_polarity_score_mBERT(sourcedata, columnname, langColumn):

    distinct_langcodes = sorted(sourcedata[langColumn].unique())
    print(distinct_langcodes)

    model_lang_tokenizer_map = {
        "hi": "bert-base-multilingual-cased",
        "bn": "bert-base-multilingual-cased",
        "ta": "bert-base-multilingual-cased",
        "te": "bert-base-multilingual-cased",
        "mr": "bert-base-multilingual-cased",
        "ml": "bert-base-multilingual-cased",
        "or": "bert-base-multilingual-cased",
        "kn": "bert-base-multilingual-cased",
        "gu": "bert-base-multilingual-cased",
        "pa": "bert-base-multilingual-cased",
        "ur": "bert-base-multilingual-cased",
        "en": "bert-base-multilingual-cased"
    }

    def compute_polarity(text, tokenizer, model):
        inputs = tokenizer(text, max_length=128, padding=True, truncation=True, return_tensors="pt")
        with torch.no_grad():
            outputs = model(**inputs)
            logits = outputs.logits
        scores = torch.softmax(logits, dim=1)
        return scores[0].tolist()

    polarity_scored_df = pd.DataFrame(columns=sourcedata.columns)

    for language_code in distinct_langcodes:
        if language_code in model_lang_tokenizer_map:
            print(f"Language code {language_code}")
            print(f"The time is: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            model_name = model_lang_tokenizer_map[language_code]
            tokenizer = BertTokenizer.from_pretrained(model_name)
            model = BertForSequenceClassification.from_pretrained(model_name, num_labels=3)
            language_df = sourcedata[sourcedata[langColumn] == language_code].copy()
            language_df[["positive_score", "negative_score", "neutral_score"]] = language_df[columnname].apply(lambda x: pd.Series(compute_polarity(x, tokenizer, model)))
            polarity_scored_df = pd.concat([polarity_scored_df, language_df], ignore_index=True)
        else:
            print(f"NLP mBERT model not found for language: {language_code}")
    return polarity_scored_df
################################################################################################
#Step23: Based on polarity score compute the sentiment by finding max of all 3 classes
def compute_sentiments(scorerecord):

    if scorerecord["positive_score"] > scorerecord["negative_score"] and scorerecord["positive_score"] > scorerecord["neutral_score"]:
        return "Positive"
    elif scorerecord["negative_score"] > scorerecord["positive_score"] and scorerecord["negative_score"] > scorerecord["neutral_score"]:
        return "Negative"
    else:
        return "Neutral"
################################################################################################
#Step24: Train NLP Multilingual mBERT by looping languages for each iteration
#Note: 11 Languages are considered for this model development
#BASE MODEL - WITH ONLY DEFAULTS AND NO OPTIMIZER OR FINETUNING PARAMETERS USED. IT IS PURELY FOR BENCHMARKING
def NLP_BASEMODEL_LANGUAGES_mBERT(sourcedata, batch_size, num_epochs, num_classes):

    Distinct_Languages = sorted(sourcedata['language_code'].unique())

    model_tokenizer_mapping = {
        "hi": "bert-base-multilingual-cased",
        "bn": "bert-base-multilingual-cased",
        "ta": "bert-base-multilingual-cased",
        "te": "bert-base-multilingual-cased",
        "mr": "bert-base-multilingual-cased",
        "ml": "bert-base-multilingual-cased",
        "or": "bert-base-multilingual-cased",
        "kn": "bert-base-multilingual-cased",
        "gu": "bert-base-multilingual-cased",
        "pa": "bert-base-multilingual-cased",
        "ur": "bert-base-multilingual-cased",
        "en": "bert-base-multilingual-cased"
    }

    metrics_dict = {
        'ModelName': [],  # New column for model name
        'LanguageCode': [],
        'Accuracy': [],
        'Precision': [],
        'Recall': [],
        'F1Score': []
    }

    for language_code in Distinct_Languages:
        #model and tokenizer name for language code
        model_name = model_tokenizer_mapping.get(language_code, 'bert-base-multilingual-uncased')
        language_df = sourcedata[sourcedata['language_code'] == language_code]
        train_df, test_df = train_test_split(language_df, test_size=0.3, random_state=42)

        tokenizer = BertTokenizer.from_pretrained(model_name)
        model = BertForSequenceClassification.from_pretrained(model_name, num_labels=num_classes)

        label_mapping = {"Positive": 0, "Negative": 1, "Neutral": 2}

        train_labels_numeric = [label_mapping[label] for label in train_df['mBert_sentiment']]
        test_labels_numeric = [label_mapping[label] for label in test_df['mBert_sentiment']]

        #Convert labels to one-hot encoding to run mBERT
        def one_hot_encode_labels(labels, num_classes):
            one_hot_labels = []
            for label in labels:
                one_hot = [0] * num_classes
                one_hot[label] = 1
                one_hot_labels.append(one_hot)
            return torch.tensor(one_hot_labels, dtype=torch.float32)

        train_labels = one_hot_encode_labels(train_labels_numeric, num_classes)
        test_labels = one_hot_encode_labels(test_labels_numeric, num_classes)

        #Preparing input data for BERT inputs
        train_encodings = tokenizer(list(train_df['comment_textDisplay']), truncation=True, padding=True, max_length=128,
                                    return_tensors='pt')
        test_encodings = tokenizer(list(test_df['comment_textDisplay']), truncation=True, padding=True, max_length=128, return_tensors='pt')

        train_dataset = TensorDataset(train_encodings['input_ids'], train_encodings['attention_mask'], train_labels)
        test_dataset = TensorDataset(test_encodings['input_ids'], test_encodings['attention_mask'], test_labels)

        train_dataloader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
        test_dataloader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        model.to(device)

        #Training for languages loop
        for epoch in range(num_epochs):
            print(f"Language code {language_code}: Epoch {epoch + 1}/{num_epochs} is running...")
            print(f"The time is: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            model.train()
            train_loss = 0.0
            for batch in tqdm(train_dataloader, desc=f"Epoch {epoch + 1}/{num_epochs}"):
                batch = tuple(t.to(device) for t in batch)
                inputs = {'input_ids': batch[0], 'attention_mask': batch[1], 'labels': batch[2]}
                outputs = model(**inputs)
                loss = outputs.loss
                loss.backward()
                train_loss += loss.item()

            print(f"Epoch {epoch + 1}/{num_epochs} - Training loss: {train_loss / len(train_dataloader)}")

        #Evaluation on test dataset
        model.eval()
        predictions = []
        with torch.no_grad():
            for batch in tqdm(test_dataloader, desc="Evaluating"):
                batch = tuple(t.to(device) for t in batch)
                inputs = {'input_ids': batch[0], 'attention_mask': batch[1]}
                outputs = model(**inputs)
                logits = outputs.logits
                preds = torch.argmax(logits, dim=1)
                predictions.extend(preds.cpu().numpy())

        test_labels_decoded = [np.argmax(label) for label in test_labels.cpu().numpy()]

        accuracy = accuracy_score(test_labels_decoded, predictions)
        precision = precision_score(test_labels_decoded, predictions, average='weighted', zero_division=1)
        recall = recall_score(test_labels_decoded, predictions, average='weighted', zero_division=1)
        f1 = f1_score(test_labels_decoded, predictions, average='weighted')

        metrics_dict['ModelName'].append('mBERT Base Model')
        metrics_dict['LanguageCode'].append(language_code)
        metrics_dict['Accuracy'].append(accuracy)
        metrics_dict['Precision'].append(precision)
        metrics_dict['Recall'].append(recall)
        metrics_dict['F1Score'].append(f1)
    baseModel_Eval_metrics = pd.DataFrame(metrics_dict)
    return baseModel_Eval_metrics

################################################################################################
#Step25: Train NLP Multilingual mBERT by looping languages for each iteration
#Note: 11 Languages are considered for this model development and validation
#FINETUNED MODEL - WITH OPTIMIZER AND FINETUNING PARAMETERS USED.
def NLP_FINETUNEDMODEL_LANGUAGES_mBERT(sourcedata, batch_size, num_epochs, num_classes, learning_rate):

    Distinct_Languages = sorted(sourcedata['language_code'].unique())

    # Define a mapping of language codes to model names
    model_tokenizer_mapping = {
        "hi": "bert-base-multilingual-cased",
        "bn": "bert-base-multilingual-cased",
        "ta": "bert-base-multilingual-cased",
        "te": "bert-base-multilingual-cased",
        "mr": "bert-base-multilingual-cased",
        "ml": "bert-base-multilingual-cased",
        "or": "bert-base-multilingual-cased",
        "kn": "bert-base-multilingual-cased",
        "gu": "bert-base-multilingual-cased",
        "pa": "bert-base-multilingual-cased",
        "ur": "bert-base-multilingual-cased",
        "en": "bert-base-multilingual-cased"
    }

    metrics_dict = {
        'ModelName': [],
        'LanguageCode': [],
        'Accuracy': [],
        'Precision': [],
        'Recall': [],
        'F1Score': []
    }

    for language_code in Distinct_Languages:
        model_name = model_tokenizer_mapping.get(language_code, 'bert-base-multilingual-cased')
        language_df = sourcedata[sourcedata['language_code'] == language_code]
        train_df, test_df = train_test_split(language_df, test_size=0.3, random_state=42)

        tokenizer = BertTokenizer.from_pretrained(model_name)
        model = BertForSequenceClassification.from_pretrained(model_name, num_labels=num_classes)

        label_mapping = {"Positive": 0, "Negative": 1, "Neutral": 2}

        train_labels_numeric = [label_mapping[label] for label in train_df['mBert_sentiment']]
        test_labels_numeric = [label_mapping[label] for label in test_df['mBert_sentiment']]

        #Convert labels to one-hot encoding for mBERT
        def one_hot_encode_labels(labels, num_classes):
            one_hot_labels = []
            for label in labels:
                one_hot = [0] * num_classes
                one_hot[label] = 1
                one_hot_labels.append(one_hot)
            return torch.tensor(one_hot_labels, dtype=torch.float32)

        train_labels = one_hot_encode_labels(train_labels_numeric, num_classes)
        test_labels = one_hot_encode_labels(test_labels_numeric, num_classes)

        #Data preparation for BERT inputs
        train_encodings = tokenizer(list(train_df['comment_textDisplay']), truncation=True, padding=True, max_length=128,
                                    return_tensors='pt')
        test_encodings = tokenizer(list(test_df['comment_textDisplay']), truncation=True, padding=True, max_length=128, return_tensors='pt')

        train_dataset = TensorDataset(train_encodings['input_ids'], train_encodings['attention_mask'], train_labels)
        test_dataset = TensorDataset(test_encodings['input_ids'], test_encodings['attention_mask'], test_labels)

        train_dataloader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
        test_dataloader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        model.to(device)

        #optimizer and loss function - fine tuning
        optimizer = AdamW(model.parameters(), lr=learning_rate)
        criterion = torch.nn.CrossEntropyLoss()

        #Training for loop
        for epoch in range(num_epochs):
            print(f"Language code {language_code}: Epoch {epoch + 1}/{num_epochs} is running...")
            print(f"The time is: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            model.train()
            train_loss = 0.0
            for batch in tqdm(train_dataloader, desc=f"Epoch {epoch + 1}/{num_epochs}"):
                batch = tuple(t.to(device) for t in batch)
                inputs = {'input_ids': batch[0], 'attention_mask': batch[1]}
                labels = batch[2].argmax(dim=1).to(device)  #Convert one-hot labels to class indices
                optimizer.zero_grad()
                outputs = model(**inputs)
                logits = outputs.logits
                loss = criterion(logits, labels)
                loss.backward()
                optimizer.step()
                train_loss += loss.item()

            print(f"Epoch {epoch + 1}/{num_epochs} - Training loss: {train_loss / len(train_dataloader)}")

        #scoring test dataset - Evaluation
        model.eval()
        predictions = []
        with torch.no_grad():
            for batch in tqdm(test_dataloader, desc="Evaluating"):
                batch = tuple(t.to(device) for t in batch)
                inputs = {'input_ids': batch[0], 'attention_mask': batch[1]}
                outputs = model(**inputs)
                logits = outputs.logits
                preds = torch.argmax(logits, dim=1)
                predictions.extend(preds.cpu().numpy())

        test_labels_decoded = [np.argmax(label) for label in test_labels.cpu().numpy()]

        accuracy = accuracy_score(test_labels_decoded, predictions)
        precision = precision_score(test_labels_decoded, predictions, average='weighted', zero_division=1)
        recall = recall_score(test_labels_decoded, predictions, average='weighted', zero_division=1)
        f1 = f1_score(test_labels_decoded, predictions, average='weighted')

        metrics_dict['ModelName'].append('mBERT Finetuned Model')
        metrics_dict['LanguageCode'].append(language_code)
        metrics_dict['Accuracy'].append(accuracy)
        metrics_dict['Precision'].append(precision)
        metrics_dict['Recall'].append(recall)
        metrics_dict['F1Score'].append(f1)

    FinetunedModel_Eval_metrics = pd.DataFrame(metrics_dict)
    return FinetunedModel_Eval_metrics
################################################################################################
#Step26: Summary table to justify max_length = 128 in model build
def YTcount_words(Ytcomments):
    commentstoken = Ytcomments.split()
    return len(commentstoken)
################################################################################################

# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    print(f"The Program run start time is: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    #Paramters Set
    ReadFilepath = "D:\\0_SHU_31018584\\Data\\Final_data\\"
    WriteFilepath = "D:\\0_SHU_31018584\\Data\\Final_data\\"
    start_date = '2019-01-01'
    end_date = '2019-04-10'

    #Read the Youtube comments files
    data = FileReadFromDirectory(ReadFilepath, "youtube_apidata_*.csv")
    data = data.drop('comment_authorDisplayName', axis=1) #Dropping column since user related info present

    print(data.info())
    print(f"Stage-1: The Data Collection Completed - dataframe row and column counts are: {data.shape[0]}, {data.shape[1]}, Time: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    data = AnalysisWindowTimePeriodFilter(data, start_date, end_date, "ytvideo_publishedAt")
    print(f"The Youtube comments after 01Jan-10apr date filter row and column counts are: {data.shape[0]}, {data.shape[1]}, Time: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    data = SmileyConversiontoTexts(data, "comment_textDisplay")
    data['comment_textDisplay'] = data['comment_textDisplay'].apply(EmojiRemovalfromComments)
    print(f"The smiley, emoji treatment data row and column counts are: {data.shape[0]}, {data.shape[1]}, Time: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    data = Remove_NAs_Blanks(data, "comment_textDisplay")
    data = Punctuations_Removal(data, "comment_textDisplay")
    data = DuplicateCommentsRemoval(data, "comment_textDisplay")
    print(f"The NAs, punctuations, duplicates treatment data row and column counts are: {data.shape[0]}, {data.shape[1]}, Time: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    # data = SinglegramComments_Removal(data, 'comment_textDisplay')
    data = NumbersinComments_Removal(data, 'comment_textDisplay')
    data = RepeatwordsInCommentsRemoval(data, 'comment_textDisplay')
    print(f"The Numerals, repeatwords treatment data row and column counts are: {data.shape[0]}, {data.shape[1]}, Time: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    data = CreateFlagsbyLabelingParty(data)
    data = RemoveCommentswithallFlags0(data)  # Removing comments which has flag values bjp=0 and ing=0
    data = BlankCommentsRemoval(data, 'comment_textDisplay')
    # data = SinglegramComments_Removal(data, 'comment_textDisplay')
    print(f"The party tagging, no party related comments removal data row and column counts are: {data.shape[0]}, {data.shape[1]}, Time: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    data = Language_Identification(data, 'comment_textDisplay')
    data = Unidentified_language_removal(data)
    print(f"The languages detection data row and column counts are: {data.shape[0]}, {data.shape[1]}, Time: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    data_eng = data[data['language_code'] == 'en']
    data_eng = English_comments_to_lower(data_eng, 'comment_textDisplay')
    data_eng = data_eng.apply(Custom_language_detection, axis=1)
    data_eng = data_eng.apply(Custom_language_code_mapping, axis=1)
    data_noneng = data[data['language_code'] != 'en']
    final = pd.concat([data_eng, data_noneng], ignore_index=True)
    del data_eng, data_noneng
    final.to_csv(WriteFilepath + "Comments_NoPROF_STOP.csv", index=False)
    print(f"The languages Custom detection data row and column counts are: {final.shape[0]}, {final.shape[1]}, Time: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    final = IndicProfanityWordsRemover(final)
    final['comment_textDisplay'] = final['comment_textDisplay'].apply(EnglishProfanityWordsRemover)
    final = BlankCommentsRemoval(final, 'comment_textDisplay')
    final.to_csv(WriteFilepath + "CommentsPROF_NoSTOP.csv", index=False)
    print(f"The Profanity Removal data row and column counts are: {final.shape[0]}, {final.shape[1]}, Time: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    #Stopwords removal in Indic Languages is computation Intensive
    final['comment_textDisplay'] = final['comment_textDisplay'].apply(YTCommentsStopWordsRemover) #English
    print(f"Stage-2: Data Preprocessing Completed, dataframe row and column counts are: {final.shape[0]}, {final.shape[1]}, Time: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    data_Eng = final[final['language_code'] == 'en']
    data_NoEng = final[final['language_code'] != 'en']
    data_NoEng = IndicStopWordsRemover(data_NoEng)
    final = pd.concat([data_Eng, data_NoEng], ignore_index=True)
    final = BlankCommentsRemoval(final, 'comment_textDisplay')
    final.to_csv(WriteFilepath + "CommentsPROFSTOP.csv", index=False)
    print(f"Stopwords removed dataframe row and column counts are: {final.shape[0]}, {final.shape[1]}, Time: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    # Summary table on word count to set model max_length value
    final['YTword_count'] = final['comment_textDisplay'].apply(YTcount_words) #checking number of words present per youtube comment and taking summary
    summary_table = final.groupby('YTword_count').size().reset_index(name='Frequency')
    print(summary_table.head(50), summary_table.tail(50))

    final = Compute_polarity_score_mBERT(final, "comment_textDisplay", "language_code")
    final["mBert_sentiment"] = final.apply(compute_sentiments, axis=1)

    print(f"Dataframe row and column counts are: {final.shape[0]}, {final.shape[1]}, Time: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    final.to_csv(WriteFilepath + "Youtube_Clean_dataframe.csv", index=False)
    print(f"The unsupervised labeling sentiment - polarity scoring completion time is: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    print(f"The BASE MODEL Build start time is: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    mBERTbaseModel_metrics = NLP_BASEMODEL_LANGUAGES_mBERT(final, 2, 1, 3)
    print(f"The BASE MODEL Build completed time is: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    print(f"The FINETUNED MODEL Build start time is: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    mBERTFitModel_metrics = NLP_FINETUNEDMODEL_LANGUAGES_mBERT(final, 4, 5, 3, 2e-5) #adamW optimizer
    print(f"The FINETUNED MODEL Build completed time is: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    mbert_lang_eva_metrics = pd.concat([mBERTbaseModel_metrics, mBERTFitModel_metrics], ignore_index=True)
    mbert_lang_eva_metrics.to_csv(WriteFilepath + "NLP_mBERT_Metrics.csv", index=False)
    print(f"The Program run end time is: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("The Sentiment analysis prediction model run completed")
################################################################################################